(function(){class t extends THREE.Mesh{constructor(){super(t.Geometry,new THREE.MeshBasicMaterial({opacity:0,transparent:!0})),this.type="Lensflare",this.frustumCulled=!1,this.renderOrder=1/0;const n=new THREE.Vector3,i=new THREE.Vector3,r=new THREE.FramebufferTexture(16,16,THREE.RGBFormat),o=new THREE.FramebufferTexture(16,16,THREE.RGBFormat),s=t.Geometry,a=new THREE.RawShaderMaterial({uniforms:{scale:{value:null},screenPosition:{value:null}},vertexShader:"\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}",fragmentShader:"\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );\n\n\t\t\t\t}",depthTest:!0,depthWrite:!1,transparent:!1}),l=new THREE.RawShaderMaterial({uniforms:{map:{value:r},scale:{value:null},screenPosition:{value:null}},vertexShader:"\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\t\t\t\tattribute vec2 uv;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUV = uv;\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}",fragmentShader:"\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform sampler2D map;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = texture2D( map, vUV );\n\n\t\t\t\t}",depthTest:!1,depthWrite:!1,transparent:!1}),c=new THREE.Mesh(s,a),u=[],v=e.Shader,p=new THREE.RawShaderMaterial({uniforms:{map:{value:null},occlusionMap:{value:o},color:{value:new THREE.Color(16777215)},scale:{value:new THREE.Vector2},screenPosition:{value:new THREE.Vector3}},vertexShader:v.vertexShader,fragmentShader:v.fragmentShader,blending:THREE.AdditiveBlending,transparent:!0,depthWrite:!1}),f=new THREE.Mesh(s,p);this.addElement=function(t){u.push(t)};const d=new THREE.Vector2,m=new THREE.Vector2,E=new THREE.Box2,y=new THREE.Vector4;this.onBeforeRender=function(t,e,v){t.getCurrentViewport(y);const x=y.w/y.z,h=y.z/2,T=y.w/2;let g=16/y.w;if(d.set(g*x,g),E.min.set(y.x,y.y),E.max.set(y.x+(y.z-16),y.y+(y.w-16)),i.setFromMatrixPosition(this.matrixWorld),i.applyMatrix4(v.matrixWorldInverse),!(i.z>0)&&(n.copy(i).applyMatrix4(v.projectionMatrix),m.x=y.x+n.x*h+h-8,m.y=y.y+n.y*T+T-8,E.containsPoint(m))){t.copyFramebufferToTexture(m,r);let e=a.uniforms;e["scale"].value=d,e["screenPosition"].value=n,t.renderBufferDirect(v,null,s,a,c,null),t.copyFramebufferToTexture(m,o),e=l.uniforms,e["scale"].value=d,e["screenPosition"].value=n,t.renderBufferDirect(v,null,s,l,c,null);const i=2*-n.x,E=2*-n.y;for(let r=0,o=u.length;r<o;r++){const e=u[r],o=p.uniforms;o["color"].value.copy(e.color),o["map"].value=e.texture,o["screenPosition"].value.x=n.x+i*e.distance,o["screenPosition"].value.y=n.y+E*e.distance,g=e.size/y.w;const a=y.w/y.z;o["scale"].value.set(g*a,g),p.uniformsNeedUpdate=!0,t.renderBufferDirect(v,null,s,p,f,null)}}},this.dispose=function(){a.dispose(),l.dispose(),p.dispose(),r.dispose(),o.dispose();for(let t=0,e=u.length;t<e;t++)u[t].texture.dispose()}}}t.prototype.isLensflare=!0;class e{constructor(t,e=1,n=0,i=new THREE.Color(16777215)){this.texture=t,this.size=e,this.distance=n,this.color=i}}e.Shader={uniforms:{map:{value:null},occlusionMap:{value:null},color:{value:null},scale:{value:null},screenPosition:{value:null}},vertexShader:"\n\n\t\tprecision highp float;\n\n\t\tuniform vec3 screenPosition;\n\t\tuniform vec2 scale;\n\n\t\tuniform sampler2D occlusionMap;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\n\t\tvarying vec2 vUV;\n\t\tvarying float vVisibility;\n\n\t\tvoid main() {\n\n\t\t\tvUV = uv;\n\n\t\t\tvec2 pos = position.xy;\n\n\t\t\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\n\n\t\t\tvVisibility =        visibility.r / 9.0;\n\t\t\tvVisibility *= 1.0 - visibility.g / 9.0;\n\t\t\tvVisibility *=       visibility.b / 9.0;\n\n\t\t\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n\n\t\t}",fragmentShader:"\n\n\t\tprecision highp float;\n\n\t\tuniform sampler2D map;\n\t\tuniform vec3 color;\n\n\t\tvarying vec2 vUV;\n\t\tvarying float vVisibility;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texture = texture2D( map, vUV );\n\t\t\ttexture.a *= vVisibility;\n\t\t\tgl_FragColor = texture;\n\t\t\tgl_FragColor.rgb *= color;\n\n\t\t}"},t.Geometry=function(){const t=new THREE.BufferGeometry,e=new Float32Array([-1,-1,0,0,0,1,-1,0,1,0,1,1,0,1,1,-1,1,0,0,1]),n=new THREE.InterleavedBuffer(e,5);return t.setIndex([0,1,2,0,2,3]),t.setAttribute("position",new THREE.InterleavedBufferAttribute(n,3,0,!1)),t.setAttribute("uv",new THREE.InterleavedBufferAttribute(n,2,3,!1)),t}(),THREE.Lensflare=t,THREE.LensflareElement=e})();