(function(){const t=new THREE.Vector3,o=new THREE.Vector3,e=new THREE.Vector3,n=new THREE.Vector3,r=new THREE.Vector3,c=new THREE.Vector3,s=new THREE.Vector3,i=new THREE.Quaternion;function a(a,E,p,u,l=!1){const R=E,H=p,T=u,m=a.position,y=a.near,V=a.far;n.copy(H).sub(R).normalize(),r.copy(T).sub(R).normalize(),c.crossVectors(n,r).normalize(),t.copy(R).sub(m),o.copy(H).sub(m),e.copy(T).sub(m);const w=-t.dot(c),b=n.dot(t)*y/w,h=n.dot(o)*y/w,M=r.dot(t)*y/w,d=r.dot(e)*y/w;i.setFromUnitVectors(s.set(0,1,0),r),a.quaternion.setFromUnitVectors(s.set(0,0,1).applyQuaternion(i),c).multiply(i),a.projectionMatrix.set(2*y/(h-b),0,(h+b)/(h-b),0,0,2*y/(d-M),(d+M)/(d-M),0,0,0,(V+y)/(y-V),2*V*y/(y-V),0,0,-1,0),a.projectionMatrixInverse.copy(a.projectionMatrix).invert(),l&&(a.fov=THREE.MathUtils.RAD2DEG/Math.min(1,a.aspect)*Math.atan((s.copy(H).sub(R).length()+s.copy(T).sub(R).length())/t.length()))}THREE.CameraUtils={},THREE.CameraUtils.frameCorners=a})();