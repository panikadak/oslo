(function(){const t=new THREE.Matrix4,e=new THREE.CSMFrustum,s=new THREE.Vector3,a=new THREE.Box3,i=[],h=[];class r{constructor(t){t=t||{},this.camera=t.camera,this.parent=t.parent,this.cascades=t.cascades||3,this.maxFar=t.maxFar||1e5,this.mode=t.mode||"practical",this.shadowMapSize=t.shadowMapSize||2048,this.shadowBias=t.shadowBias||1e-6,this.lightDirection=t.lightDirection||new THREE.Vector3(1,-1,1).normalize(),this.lightIntensity=t.lightIntensity||1,this.lightNear=t.lightNear||1,this.lightFar=t.lightFar||2e3,this.lightMargin=t.lightMargin||200,this.customSplitsCallback=t.customSplitsCallback,this.fade=!1,this.mainFrustum=new THREE.CSMFrustum,this.frustums=[],this.breaks=[],this.lights=[],this.shaders=new Map,this.createLights(),this.updateFrustums(),this.injectInclude()}createLights(){for(let t=0;t<this.cascades;t++){const t=new THREE.DirectionalLight(16777215,this.lightIntensity);t.castShadow=!0,t.shadow.mapSize.width=this.shadowMapSize,t.shadow.mapSize.height=this.shadowMapSize,t.shadow.camera.near=this.lightNear,t.shadow.camera.far=this.lightFar,t.shadow.bias=this.shadowBias,this.parent.add(t),this.parent.add(t.target),this.lights.push(t)}}initCascades(){const t=this.camera;t.updateProjectionMatrix(),this.mainFrustum.setFromProjectionMatrix(t.projectionMatrix,this.maxFar),this.mainFrustum.split(this.breaks,this.frustums)}updateShadowBounds(){const t=this.frustums;for(let e=0;e<t.length;e++){const t=this.lights[e],s=t.shadow.camera,a=this.frustums[e],i=a.vertices.near,h=a.vertices.far,r=h[0];let n;n=r.distanceTo(h[2])>r.distanceTo(i[2])?h[2]:i[2];let o=r.distanceTo(n);if(this.fade){const t=this.camera,e=Math.max(t.far,this.maxFar),s=a.vertices.far[0].z/(e-t.near),i=.25*Math.pow(s,2)*(e-t.near);o+=i}s.left=-o/2,s.right=o/2,s.top=o/2,s.bottom=-o/2,s.updateProjectionMatrix()}}getBreaks(){const t=this.camera,e=Math.min(t.far,this.maxFar);switch(this.breaks.length=0,this.mode){case"uniform":s(this.cascades,t.near,e,this.breaks);break;case"logarithmic":a(this.cascades,t.near,e,this.breaks);break;case"practical":r(this.cascades,t.near,e,.5,this.breaks);break;case"custom":void 0===this.customSplitsCallback&&console.error("CSM: Custom split scheme callback not defined."),this.customSplitsCallback(this.cascades,t.near,e,this.breaks);break}function s(t,e,s,a){for(let i=1;i<t;i++)a.push((e+(s-e)*i/t)/s);a.push(1)}function a(t,e,s,a){for(let i=1;i<t;i++)a.push(e*(s/e)**(i/t)/s);a.push(1)}function r(t,e,r,n,o){i.length=0,h.length=0,a(t,e,r,h),s(t,e,r,i);for(let s=1;s<t;s++)o.push(THREE.MathUtils.lerp(i[s-1],h[s-1],n));o.push(1)}}update(){const i=this.camera,h=this.frustums;for(let r=0;r<h.length;r++){const n=this.lights[r],o=n.shadow.camera,c=(o.right-o.left)/this.shadowMapSize,d=(o.top-o.bottom)/this.shadowMapSize;n.shadow.camera.updateMatrixWorld(!0),t.multiplyMatrices(n.shadow.camera.matrixWorldInverse,i.matrixWorld),h[r].toSpace(t,e);const l=e.vertices.near,m=e.vertices.far;a.makeEmpty();for(let t=0;t<4;t++)a.expandByPoint(l[t]),a.expandByPoint(m[t]);a.getCenter(s),s.z=a.max.z+this.lightMargin,s.x=Math.floor(s.x/c)*c,s.y=Math.floor(s.y/d)*d,s.applyMatrix4(n.shadow.camera.matrixWorld),n.position.copy(s),n.target.position.copy(s),n.target.position.x+=this.lightDirection.x,n.target.position.y+=this.lightDirection.y,n.target.position.z+=this.lightDirection.z}}injectInclude(){THREE.ShaderChunk.lights_fragment_begin=THREE.CSMShader.lights_fragment_begin,THREE.ShaderChunk.lights_pars_begin=THREE.CSMShader.lights_pars_begin}setupMaterial(t){t.defines=t.defines||{},t.defines.USE_CSM=1,t.defines.CSM_CASCADES=this.cascades,this.fade&&(t.defines.CSM_FADE="");const e=[],s=this,a=this.shaders;t.onBeforeCompile=function(i){const h=Math.min(s.camera.far,s.maxFar);s.getExtendedBreaks(e),i.uniforms.CSM_cascades={value:e},i.uniforms.cameraNear={value:s.camera.near},i.uniforms.shadowFar={value:h},a.set(t,i)},a.set(t,null)}updateUniforms(){const t=Math.min(this.camera.far,this.maxFar),e=this.shaders;e.forEach((function(e,s){if(null!==e){const s=e.uniforms;this.getExtendedBreaks(s.CSM_cascades.value),s.cameraNear.value=this.camera.near,s.shadowFar.value=t}!this.fade&&"CSM_FADE"in s.defines?(delete s.defines.CSM_FADE,s.needsUpdate=!0):this.fade&&!("CSM_FADE"in s.defines)&&(s.defines.CSM_FADE="",s.needsUpdate=!0)}),this)}getExtendedBreaks(t){while(t.length<this.breaks.length)t.push(new THREE.Vector2);t.length=this.breaks.length;for(let e=0;e<this.cascades;e++){const s=this.breaks[e],a=this.breaks[e-1]||0;t[e].x=a,t[e].y=s}}updateFrustums(){this.getBreaks(),this.initCascades(),this.updateShadowBounds(),this.updateUniforms()}remove(){for(let t=0;t<this.lights.length;t++)this.parent.remove(this.lights[t])}dispose(){const t=this.shaders;t.forEach((function(t,e){delete e.onBeforeCompile,delete e.defines.USE_CSM,delete e.defines.CSM_CASCADES,delete e.defines.CSM_FADE,null!==t&&(delete t.uniforms.CSM_cascades,delete t.uniforms.cameraNear,delete t.uniforms.shadowFar),e.needsUpdate=!0})),t.clear()}}THREE.CSM=r})();