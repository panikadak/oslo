(function(){const t={c:null,u:[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3],e:[]},e={c:null,u:[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3],e:[]},s=[[],[],[]],i=[[],[],[]],a=[],r=new THREE.Vector3,n=new THREE.Vector3,o=new THREE.Vector3,h=new THREE.Vector3,c=new THREE.Vector3,l=new THREE.Vector3,u=new THREE.Matrix3,E=new THREE.Box3,S=new THREE.Matrix4,f=new THREE.Matrix4,z=new THREE.Ray;class m{constructor(t=new THREE.Vector3,e=new THREE.Vector3,s=new THREE.Matrix3){this.center=t,this.halfSize=e,this.rotation=s}set(t,e,s){return this.center=t,this.halfSize=e,this.rotation=s,this}copy(t){return this.center.copy(t.center),this.halfSize.copy(t.halfSize),this.rotation.copy(t.rotation),this}clone(){return(new this.constructor).copy(this)}getSize(t){return t.copy(this.halfSize).multiplyScalar(2)}clampPoint(t,e){const s=this.halfSize;h.subVectors(t,this.center),this.rotation.extractBasis(r,n,o),e.copy(this.center);const i=THREE.MathUtils.clamp(h.dot(r),-s.x,s.x);e.add(r.multiplyScalar(i));const a=THREE.MathUtils.clamp(h.dot(n),-s.y,s.y);e.add(n.multiplyScalar(a));const c=THREE.MathUtils.clamp(h.dot(o),-s.z,s.z);return e.add(o.multiplyScalar(c)),e}containsPoint(t){return h.subVectors(t,this.center),this.rotation.extractBasis(r,n,o),Math.abs(h.dot(r))<=this.halfSize.x&&Math.abs(h.dot(n))<=this.halfSize.y&&Math.abs(h.dot(o))<=this.halfSize.z}intersectsBox3(t){return this.intersectsOBB(M.fromBox3(t))}intersectsSphere(t){return this.clampPoint(t.center,l),l.distanceToSquared(t.center)<=t.radius*t.radius}intersectsOBB(r,n=Number.EPSILON){t.c=this.center,t.e[0]=this.halfSize.x,t.e[1]=this.halfSize.y,t.e[2]=this.halfSize.z,this.rotation.extractBasis(t.u[0],t.u[1],t.u[2]),e.c=r.center,e.e[0]=r.halfSize.x,e.e[1]=r.halfSize.y,e.e[2]=r.halfSize.z,r.rotation.extractBasis(e.u[0],e.u[1],e.u[2]);for(let i=0;i<3;i++)for(let a=0;a<3;a++)s[i][a]=t.u[i].dot(e.u[a]);h.subVectors(e.c,t.c),a[0]=h.dot(t.u[0]),a[1]=h.dot(t.u[1]),a[2]=h.dot(t.u[2]);for(let t=0;t<3;t++)for(let e=0;e<3;e++)i[t][e]=Math.abs(s[t][e])+n;let o,c;for(let s=0;s<3;s++)if(o=t.e[s],c=e.e[0]*i[s][0]+e.e[1]*i[s][1]+e.e[2]*i[s][2],Math.abs(a[s])>o+c)return!1;for(let h=0;h<3;h++)if(o=t.e[0]*i[0][h]+t.e[1]*i[1][h]+t.e[2]*i[2][h],c=e.e[h],Math.abs(a[0]*s[0][h]+a[1]*s[1][h]+a[2]*s[2][h])>o+c)return!1;return o=t.e[1]*i[2][0]+t.e[2]*i[1][0],c=e.e[1]*i[0][2]+e.e[2]*i[0][1],!(Math.abs(a[2]*s[1][0]-a[1]*s[2][0])>o+c)&&(o=t.e[1]*i[2][1]+t.e[2]*i[1][1],c=e.e[0]*i[0][2]+e.e[2]*i[0][0],!(Math.abs(a[2]*s[1][1]-a[1]*s[2][1])>o+c)&&(o=t.e[1]*i[2][2]+t.e[2]*i[1][2],c=e.e[0]*i[0][1]+e.e[1]*i[0][0],!(Math.abs(a[2]*s[1][2]-a[1]*s[2][2])>o+c)&&(o=t.e[0]*i[2][0]+t.e[2]*i[0][0],c=e.e[1]*i[1][2]+e.e[2]*i[1][1],!(Math.abs(a[0]*s[2][0]-a[2]*s[0][0])>o+c)&&(o=t.e[0]*i[2][1]+t.e[2]*i[0][1],c=e.e[0]*i[1][2]+e.e[2]*i[1][0],!(Math.abs(a[0]*s[2][1]-a[2]*s[0][1])>o+c)&&(o=t.e[0]*i[2][2]+t.e[2]*i[0][2],c=e.e[0]*i[1][1]+e.e[1]*i[1][0],!(Math.abs(a[0]*s[2][2]-a[2]*s[0][2])>o+c)&&(o=t.e[0]*i[1][0]+t.e[1]*i[0][0],c=e.e[1]*i[2][2]+e.e[2]*i[2][1],!(Math.abs(a[1]*s[0][0]-a[0]*s[1][0])>o+c)&&(o=t.e[0]*i[1][1]+t.e[1]*i[0][1],c=e.e[0]*i[2][2]+e.e[2]*i[2][0],!(Math.abs(a[1]*s[0][1]-a[0]*s[1][1])>o+c)&&(o=t.e[0]*i[1][2]+t.e[1]*i[0][2],c=e.e[0]*i[2][1]+e.e[1]*i[2][0],!(Math.abs(a[1]*s[0][2]-a[0]*s[1][2])>o+c)))))))))}intersectsPlane(t){this.rotation.extractBasis(r,n,o);const e=this.halfSize.x*Math.abs(t.normal.dot(r))+this.halfSize.y*Math.abs(t.normal.dot(n))+this.halfSize.z*Math.abs(t.normal.dot(o)),s=t.normal.dot(this.center)-t.constant;return Math.abs(s)<=e}intersectRay(t,e){return this.getSize(c),E.setFromCenterAndSize(h.set(0,0,0),c),S.setFromMatrix3(this.rotation),S.setPosition(this.center),f.copy(S).invert(),z.copy(t).applyMatrix4(f),z.intersectBox(E,e)?e.applyMatrix4(S):null}intersectsRay(t){return null!==this.intersectRay(t,h)}fromBox3(t){return t.getCenter(this.center),t.getSize(this.halfSize).multiplyScalar(.5),this.rotation.identity(),this}equals(t){return t.center.equals(this.center)&&t.halfSize.equals(this.halfSize)&&t.rotation.equals(this.rotation)}applyMatrix4(t){const e=t.elements;let s=h.set(e[0],e[1],e[2]).length();const i=h.set(e[4],e[5],e[6]).length(),a=h.set(e[8],e[9],e[10]).length(),r=t.determinant();r<0&&(s=-s),u.setFromMatrix4(t);const n=1/s,o=1/i,c=1/a;return u.elements[0]*=n,u.elements[1]*=n,u.elements[2]*=n,u.elements[3]*=o,u.elements[4]*=o,u.elements[5]*=o,u.elements[6]*=c,u.elements[7]*=c,u.elements[8]*=c,this.rotation.multiply(u),this.halfSize.x*=s,this.halfSize.y*=i,this.halfSize.z*=a,h.setFromMatrixPosition(t),this.center.add(h),this}}const M=new m;THREE.OBB=m})();