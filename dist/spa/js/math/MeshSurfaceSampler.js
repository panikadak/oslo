(function(){const t=new THREE.Triangle,e=new THREE.Vector3;class r{constructor(t){let e=t.geometry;if(!e.isBufferGeometry||3!==e.attributes.position.itemSize)throw new Error("THREE.MeshSurfaceSampler: Requires BufferGeometry triangle mesh.");e.index&&(console.warn("THREE.MeshSurfaceSampler: Converting geometry to non-indexed BufferGeometry."),e=e.toNonIndexed()),this.geometry=e,this.randomFunction=Math.random,this.positionAttribute=this.geometry.getAttribute("position"),this.colorAttribute=this.geometry.getAttribute("color"),this.weightAttribute=null,this.distribution=null}setWeightAttribute(t){return this.weightAttribute=t?this.geometry.getAttribute(t):null,this}build(){const e=this.positionAttribute,r=this.weightAttribute,i=new Float32Array(e.count/3);for(let n=0;n<e.count;n+=3){let o=1;r&&(o=r.getX(n)+r.getX(n+1)+r.getX(n+2)),t.a.fromBufferAttribute(e,n),t.b.fromBufferAttribute(e,n+1),t.c.fromBufferAttribute(e,n+2),o*=t.getArea(),i[n/3]=o}this.distribution=new Float32Array(e.count/3);let o=0;for(let t=0;t<i.length;t++)o+=i[t],this.distribution[t]=o;return this}setRandomGenerator(t){return this.randomFunction=t,this}sample(t,e,r){const i=this.distribution[this.distribution.length-1],o=this.binarySearch(this.randomFunction()*i);return this.sampleFace(o,t,e,r)}binarySearch(t){const e=this.distribution;let r=0,i=e.length-1,o=-1;while(r<=i){const n=Math.ceil((r+i)/2);if(0===n||e[n-1]<=t&&e[n]>t){o=n;break}t<e[n]?i=n-1:r=n+1}return o}sampleFace(r,i,o,n){let s=this.randomFunction(),u=this.randomFunction();return s+u>1&&(s=1-s,u=1-u),t.a.fromBufferAttribute(this.positionAttribute,3*r),t.b.fromBufferAttribute(this.positionAttribute,3*r+1),t.c.fromBufferAttribute(this.positionAttribute,3*r+2),i.set(0,0,0).addScaledVector(t.a,s).addScaledVector(t.b,u).addScaledVector(t.c,1-(s+u)),void 0!==o&&t.getNormal(o),void 0!==n&&void 0!==this.colorAttribute&&(t.a.fromBufferAttribute(this.colorAttribute,3*r),t.b.fromBufferAttribute(this.colorAttribute,3*r+1),t.c.fromBufferAttribute(this.colorAttribute,3*r+2),e.set(0,0,0).addScaledVector(t.a,s).addScaledVector(t.b,u).addScaledVector(t.c,1-(s+u)),n.r=e.x,n.g=e.y,n.b=e.z),this}}THREE.MeshSurfaceSampler=r})();