(function(){const t=new THREE.Vector3,s=new THREE.Vector3,i=new THREE.Vector3,a=1e-10;class e{constructor(t=new THREE.Vector3(0,0,0),s=new THREE.Vector3(0,1,0),i=1){this.start=t,this.end=s,this.radius=i}clone(){return new e(this.start.clone(),this.end.clone(),this.radius)}set(t,s,i){this.start.copy(t),this.end.copy(s),this.radius=i}copy(t){this.start.copy(t.start),this.end.copy(t.end),this.radius=t.radius}getCenter(t){return t.copy(this.end).add(this.start).multiplyScalar(.5)}translate(t){this.start.add(t),this.end.add(t)}checkAABBAxis(t,s,i,a,e,n,r,h,c){return(e-t<c||e-i<c)&&(t-n<c||i-n<c)&&(r-s<c||r-a<c)&&(s-h<c||a-h<c)}intersectsBox(t){return this.checkAABBAxis(this.start.x,this.start.y,this.end.x,this.end.y,t.min.x,t.max.x,t.min.y,t.max.y,this.radius)&&this.checkAABBAxis(this.start.x,this.start.z,this.end.x,this.end.z,t.min.x,t.max.x,t.min.z,t.max.z,this.radius)&&this.checkAABBAxis(this.start.y,this.start.z,this.end.y,this.end.z,t.min.y,t.max.y,t.min.z,t.max.z,this.radius)}lineLineMinimumPoints(e,n){const r=t.copy(e.end).sub(e.start),h=s.copy(n.end).sub(n.start),c=i.copy(n.start).sub(e.start),d=r.dot(h),o=r.dot(r),u=h.dot(h),m=h.dot(c),x=r.dot(c);let y,l;const p=o*u-d*d;if(Math.abs(p)<a){const t=-m/u,s=(d-m)/u;Math.abs(t-.5)<Math.abs(s-.5)?(y=0,l=t):(y=1,l=s)}else y=(m*d+x*u)/p,l=(y*d-m)/u;l=Math.max(0,Math.min(1,l)),y=Math.max(0,Math.min(1,y));const A=r.multiplyScalar(y).add(e.start),E=h.multiplyScalar(l).add(n.start);return[A,E]}}THREE.Capsule=e})();