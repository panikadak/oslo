(function(){class t{constructor(t,r,i=[],s={}){if("undefined"===typeof Ammo)throw new Error("THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js");this.manager=new e,this.mesh=t,this.unitStep=void 0!==s.unitStep?s.unitStep:1/65,this.maxStepNum=void 0!==s.maxStepNum?s.maxStepNum:3,this.gravity=new THREE.Vector3(0,-98,0),void 0!==s.gravity&&this.gravity.copy(s.gravity),this.world=void 0!==s.world?s.world:null,this.bodies=[],this.constraints=[],this._init(t,r,i)}update(t){const e=this.manager,r=this.mesh;let i=!1;const s=e.allocThreeVector3(),o=e.allocThreeQuaternion(),n=e.allocThreeVector3();let a;return r.matrixWorld.decompose(s,o,n),1===n.x&&1===n.y&&1===n.z||(i=!0),i&&(a=r.parent,null!==a&&(r.parent=null),n.copy(this.mesh.scale),r.scale.set(1,1,1),r.updateMatrixWorld(!0)),this._updateRigidBodies(),this._stepSimulation(t),this._updateBones(),i&&(null!==a&&(r.parent=a),r.scale.copy(n)),e.freeThreeVector3(n),e.freeThreeQuaternion(o),e.freeThreeVector3(s),this}reset(){for(let t=0,e=this.bodies.length;t<e;t++)this.bodies[t].reset();return this}warmup(t){for(let e=0;e<t;e++)this.update(1/60);return this}setGravity(t){return this.world.setGravity(new Ammo.btVector3(t.x,t.y,t.z)),this.gravity.copy(t),this}createHelper(){return new h(this.mesh,this)}_init(t,e,r){const i=this.manager;let s=t.parent;null!==s&&(s=null);const o=i.allocThreeVector3(),n=i.allocThreeQuaternion(),a=i.allocThreeVector3();o.copy(t.position),n.copy(t.quaternion),a.copy(t.scale),t.position.set(0,0,0),t.quaternion.set(0,0,0,1),t.scale.set(1,1,1),t.updateMatrixWorld(!0),null===this.world&&(this.world=this._createWorld(),this.setGravity(this.gravity)),this._initRigidBodies(e),this._initConstraints(r),null!==s&&(t.parent=s),t.position.copy(o),t.quaternion.copy(n),t.scale.copy(a),t.updateMatrixWorld(!0),this.reset(),i.freeThreeVector3(o),i.freeThreeQuaternion(n),i.freeThreeVector3(a)}_createWorld(){const t=new Ammo.btDefaultCollisionConfiguration,e=new Ammo.btCollisionDispatcher(t),r=new Ammo.btDbvtBroadphase,i=new Ammo.btSequentialImpulseConstraintSolver,s=new Ammo.btDiscreteDynamicsWorld(e,r,i,t);return s}_initRigidBodies(t){for(let e=0,i=t.length;e<i;e++)this.bodies.push(new r(this.mesh,this.world,t[e],this.manager))}_initConstraints(t){for(let e=0,r=t.length;e<r;e++){const r=t[e],s=this.bodies[r.rigidBodyIndex1],o=this.bodies[r.rigidBodyIndex2];this.constraints.push(new i(this.mesh,this.world,s,o,r,this.manager))}}_stepSimulation(t){const e=this.unitStep;let r=t,i=1+(t/e|0);r<e&&(r=e,i=1),i>this.maxStepNum&&(i=this.maxStepNum),this.world.stepSimulation(r,i,e)}_updateRigidBodies(){for(let t=0,e=this.bodies.length;t<e;t++)this.bodies[t].updateFromBone()}_updateBones(){for(let t=0,e=this.bodies.length;t<e;t++)this.bodies[t].updateBone()}}class e{constructor(){this.threeVector3s=[],this.threeMatrix4s=[],this.threeQuaternions=[],this.threeEulers=[],this.transforms=[],this.quaternions=[],this.vector3s=[]}allocThreeVector3(){return this.threeVector3s.length>0?this.threeVector3s.pop():new THREE.Vector3}freeThreeVector3(t){this.threeVector3s.push(t)}allocThreeMatrix4(){return this.threeMatrix4s.length>0?this.threeMatrix4s.pop():new THREE.Matrix4}freeThreeMatrix4(t){this.threeMatrix4s.push(t)}allocThreeQuaternion(){return this.threeQuaternions.length>0?this.threeQuaternions.pop():new THREE.Quaternion}freeThreeQuaternion(t){this.threeQuaternions.push(t)}allocThreeEuler(){return this.threeEulers.length>0?this.threeEulers.pop():new THREE.Euler}freeThreeEuler(t){this.threeEulers.push(t)}allocTransform(){return this.transforms.length>0?this.transforms.pop():new Ammo.btTransform}freeTransform(t){this.transforms.push(t)}allocQuaternion(){return this.quaternions.length>0?this.quaternions.pop():new Ammo.btQuaternion}freeQuaternion(t){this.quaternions.push(t)}allocVector3(){return this.vector3s.length>0?this.vector3s.pop():new Ammo.btVector3}freeVector3(t){this.vector3s.push(t)}setIdentity(t){t.setIdentity()}getBasis(t){var e=this.allocQuaternion();return t.getBasis().getRotation(e),e}getBasisAsMatrix3(t){var e=this.getBasis(t),r=this.quaternionToMatrix3(e);return this.freeQuaternion(e),r}getOrigin(t){return t.getOrigin()}setOrigin(t,e){t.getOrigin().setValue(e.x(),e.y(),e.z())}copyOrigin(t,e){var r=e.getOrigin();this.setOrigin(t,r)}setBasis(t,e){t.setRotation(e)}setBasisFromMatrix3(t,e){var r=this.matrix3ToQuaternion(e);this.setBasis(t,r),this.freeQuaternion(r)}setOriginFromArray3(t,e){t.getOrigin().setValue(e[0],e[1],e[2])}setOriginFromThreeVector3(t,e){t.getOrigin().setValue(e.x,e.y,e.z)}setBasisFromArray3(t,e){var r=this.allocThreeQuaternion(),i=this.allocThreeEuler();i.set(e[0],e[1],e[2]),this.setBasisFromThreeQuaternion(t,r.setFromEuler(i)),this.freeThreeEuler(i),this.freeThreeQuaternion(r)}setBasisFromThreeQuaternion(t,e){var r=this.allocQuaternion();r.setX(e.x),r.setY(e.y),r.setZ(e.z),r.setW(e.w),this.setBasis(t,r),this.freeQuaternion(r)}multiplyTransforms(t,e){var r=this.allocTransform();this.setIdentity(r);var i=this.getBasisAsMatrix3(t),s=this.getBasisAsMatrix3(e),o=this.getOrigin(t),n=this.getOrigin(e),a=this.multiplyMatrix3ByVector3(i,n),h=this.addVector3(a,o);this.setOrigin(r,h);var l=this.multiplyMatrices3(i,s);return this.setBasisFromMatrix3(r,l),this.freeVector3(a),this.freeVector3(h),r}inverseTransform(t){var e=this.allocTransform(),r=this.getBasisAsMatrix3(t),i=this.getOrigin(t),s=this.transposeMatrix3(r),o=this.negativeVector3(i),n=this.multiplyMatrix3ByVector3(s,o);return this.setOrigin(e,n),this.setBasisFromMatrix3(e,s),this.freeVector3(o),this.freeVector3(n),e}multiplyMatrices3(t,e){var r=[],i=this.rowOfMatrix3(t,0),s=this.rowOfMatrix3(t,1),o=this.rowOfMatrix3(t,2),n=this.columnOfMatrix3(e,0),a=this.columnOfMatrix3(e,1),h=this.columnOfMatrix3(e,2);return r[0]=this.dotVectors3(i,n),r[1]=this.dotVectors3(i,a),r[2]=this.dotVectors3(i,h),r[3]=this.dotVectors3(s,n),r[4]=this.dotVectors3(s,a),r[5]=this.dotVectors3(s,h),r[6]=this.dotVectors3(o,n),r[7]=this.dotVectors3(o,a),r[8]=this.dotVectors3(o,h),this.freeVector3(i),this.freeVector3(s),this.freeVector3(o),this.freeVector3(n),this.freeVector3(a),this.freeVector3(h),r}addVector3(t,e){var r=this.allocVector3();return r.setValue(t.x()+e.x(),t.y()+e.y(),t.z()+e.z()),r}dotVectors3(t,e){return t.x()*e.x()+t.y()*e.y()+t.z()*e.z()}rowOfMatrix3(t,e){var r=this.allocVector3();return r.setValue(t[3*e+0],t[3*e+1],t[3*e+2]),r}columnOfMatrix3(t,e){var r=this.allocVector3();return r.setValue(t[e+0],t[e+3],t[e+6]),r}negativeVector3(t){var e=this.allocVector3();return e.setValue(-t.x(),-t.y(),-t.z()),e}multiplyMatrix3ByVector3(t,e){var r=this.allocVector3(),i=this.rowOfMatrix3(t,0),s=this.rowOfMatrix3(t,1),o=this.rowOfMatrix3(t,2),n=this.dotVectors3(i,e),a=this.dotVectors3(s,e),h=this.dotVectors3(o,e);return r.setValue(n,a,h),this.freeVector3(i),this.freeVector3(s),this.freeVector3(o),r}transposeMatrix3(t){var e=[];return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],e}quaternionToMatrix3(t){var e=[],r=t.x(),i=t.y(),s=t.z(),o=t.w(),n=r*r,a=i*i,h=s*s,l=r*i,m=i*s,c=s*r,u=r*o,p=i*o,f=s*o;return e[0]=1-2*(a+h),e[1]=2*(l-f),e[2]=2*(c+p),e[3]=2*(l+f),e[4]=1-2*(h+n),e[5]=2*(m-u),e[6]=2*(c-p),e[7]=2*(m+u),e[8]=1-2*(n+a),e}matrix3ToQuaternion(t){var e,r,i,s,o,n=t[0]+t[4]+t[8];n>0?(e=2*Math.sqrt(n+1),o=.25*e,r=(t[7]-t[5])/e,i=(t[2]-t[6])/e,s=(t[3]-t[1])/e):t[0]>t[4]&&t[0]>t[8]?(e=2*Math.sqrt(1+t[0]-t[4]-t[8]),o=(t[7]-t[5])/e,r=.25*e,i=(t[1]+t[3])/e,s=(t[2]+t[6])/e):t[4]>t[8]?(e=2*Math.sqrt(1+t[4]-t[0]-t[8]),o=(t[2]-t[6])/e,r=(t[1]+t[3])/e,i=.25*e,s=(t[5]+t[7])/e):(e=2*Math.sqrt(1+t[8]-t[0]-t[4]),o=(t[3]-t[1])/e,r=(t[2]+t[6])/e,i=(t[5]+t[7])/e,s=.25*e);var a=this.allocQuaternion();return a.setX(r),a.setY(i),a.setZ(s),a.setW(o),a}}class r{constructor(t,e,r,i){this.mesh=t,this.world=e,this.params=r,this.manager=i,this.body=null,this.bone=null,this.boneOffsetForm=null,this.boneOffsetFormInverse=null,this._init()}reset(){return this._setTransformFromBone(),this}updateFromBone(){return-1!==this.params.boneIndex&&0===this.params.type&&this._setTransformFromBone(),this}updateBone(){return 0===this.params.type||-1===this.params.boneIndex||(this._updateBoneRotation(),1===this.params.type&&this._updateBonePosition(),this.bone.updateMatrixWorld(!0),2===this.params.type&&this._setPositionFromBone()),this}_init(){function t(t){switch(t.shapeType){case 0:return new Ammo.btSphereShape(t.width);case 1:return new Ammo.btBoxShape(new Ammo.btVector3(t.width,t.height,t.depth));case 2:return new Ammo.btCapsuleShape(t.width,t.height);default:throw"unknown shape type "+t.shapeType}}const e=this.manager,r=this.params,i=this.mesh.skeleton.bones,s=-1===r.boneIndex?new THREE.Bone:i[r.boneIndex],o=t(r),n=0===r.type?0:r.weight,a=e.allocVector3();a.setValue(0,0,0),0!==n&&o.calculateLocalInertia(n,a);const h=e.allocTransform();e.setIdentity(h),e.setOriginFromArray3(h,r.position),e.setBasisFromArray3(h,r.rotation);const l=e.allocThreeVector3(),m=e.allocTransform();e.setIdentity(m),e.setOriginFromThreeVector3(m,s.getWorldPosition(l));const c=e.multiplyTransforms(m,h),u=new Ammo.btDefaultMotionState(c),p=new Ammo.btRigidBodyConstructionInfo(n,u,o,a);p.set_m_friction(r.friction),p.set_m_restitution(r.restitution);const f=new Ammo.btRigidBody(p);0===r.type&&(f.setCollisionFlags(2|f.getCollisionFlags()),f.setActivationState(4)),f.setDamping(r.positionDamping,r.rotationDamping),f.setSleepingThresholds(0,0),this.world.addRigidBody(f,1<<r.groupIndex,r.groupTarget),this.body=f,this.bone=s,this.boneOffsetForm=h,this.boneOffsetFormInverse=e.inverseTransform(h),e.freeVector3(a),e.freeTransform(c),e.freeTransform(m),e.freeThreeVector3(l)}_getBoneTransform(){const t=this.manager,e=t.allocThreeVector3(),r=t.allocThreeQuaternion(),i=t.allocThreeVector3();this.bone.matrixWorld.decompose(e,r,i);const s=t.allocTransform();t.setOriginFromThreeVector3(s,e),t.setBasisFromThreeQuaternion(s,r);const o=t.multiplyTransforms(s,this.boneOffsetForm);return t.freeTransform(s),t.freeThreeVector3(i),t.freeThreeQuaternion(r),t.freeThreeVector3(e),o}_getWorldTransformForBone(){const t=this.manager,e=this.body.getCenterOfMassTransform();return t.multiplyTransforms(e,this.boneOffsetFormInverse)}_setTransformFromBone(){const t=this.manager,e=this._getBoneTransform();this.body.setCenterOfMassTransform(e),this.body.getMotionState().setWorldTransform(e),t.freeTransform(e)}_setPositionFromBone(){const t=this.manager,e=this._getBoneTransform(),r=t.allocTransform();this.body.getMotionState().getWorldTransform(r),t.copyOrigin(r,e),this.body.setCenterOfMassTransform(r),this.body.getMotionState().setWorldTransform(r),t.freeTransform(r),t.freeTransform(e)}_updateBoneRotation(){const t=this.manager,e=this._getWorldTransformForBone(),r=t.getBasis(e),i=t.allocThreeQuaternion(),s=t.allocThreeQuaternion(),o=t.allocThreeQuaternion();i.set(r.x(),r.y(),r.z(),r.w()),s.setFromRotationMatrix(this.bone.matrixWorld),s.conjugate(),s.multiply(i),o.setFromRotationMatrix(this.bone.matrix),this.bone.quaternion.copy(s.multiply(o).normalize()),t.freeThreeQuaternion(i),t.freeThreeQuaternion(s),t.freeThreeQuaternion(o),t.freeQuaternion(r),t.freeTransform(e)}_updateBonePosition(){const t=this.manager,e=this._getWorldTransformForBone(),r=t.allocThreeVector3(),i=t.getOrigin(e);r.set(i.x(),i.y(),i.z()),this.bone.parent&&this.bone.parent.worldToLocal(r),this.bone.position.copy(r),t.freeThreeVector3(r),t.freeTransform(e)}}class i{constructor(t,e,r,i,s,o){this.mesh=t,this.world=e,this.bodyA=r,this.bodyB=i,this.params=s,this.manager=o,this.constraint=null,this._init()}_init(){const t=this.manager,e=this.params,r=this.bodyA,i=this.bodyB,s=t.allocTransform();t.setIdentity(s),t.setOriginFromArray3(s,e.position),t.setBasisFromArray3(s,e.rotation);const o=t.allocTransform(),n=t.allocTransform();r.body.getMotionState().getWorldTransform(o),i.body.getMotionState().getWorldTransform(n);const a=t.inverseTransform(o),h=t.inverseTransform(n),l=t.multiplyTransforms(a,s),m=t.multiplyTransforms(h,s),c=new Ammo.btGeneric6DofSpringConstraint(r.body,i.body,l,m,!0),u=t.allocVector3(),p=t.allocVector3(),f=t.allocVector3(),d=t.allocVector3();u.setValue(e.translationLimitation1[0],e.translationLimitation1[1],e.translationLimitation1[2]),p.setValue(e.translationLimitation2[0],e.translationLimitation2[1],e.translationLimitation2[2]),f.setValue(e.rotationLimitation1[0],e.rotationLimitation1[1],e.rotationLimitation1[2]),d.setValue(e.rotationLimitation2[0],e.rotationLimitation2[1],e.rotationLimitation2[2]),c.setLinearLowerLimit(u),c.setLinearUpperLimit(p),c.setAngularLowerLimit(f),c.setAngularUpperLimit(d);for(let T=0;T<3;T++)0!==e.springPosition[T]&&(c.enableSpring(T,!0),c.setStiffness(T,e.springPosition[T]));for(let T=0;T<3;T++)0!==e.springRotation[T]&&(c.enableSpring(T+3,!0),c.setStiffness(T+3,e.springRotation[T]));if(void 0!==c.setParam)for(let T=0;T<6;T++)c.setParam(2,.475,T);this.world.addConstraint(c,!0),this.constraint=c,t.freeTransform(s),t.freeTransform(o),t.freeTransform(n),t.freeTransform(a),t.freeTransform(h),t.freeTransform(l),t.freeTransform(m),t.freeVector3(u),t.freeVector3(p),t.freeVector3(f),t.freeVector3(d)}}const s=new THREE.Vector3,o=new THREE.Quaternion,n=new THREE.Vector3,a=new THREE.Matrix4;class h extends THREE.Object3D{constructor(t,e){super(),this.root=t,this.physics=e,this.matrix.copy(t.matrixWorld),this.matrixAutoUpdate=!1,this.materials=[],this.materials.push(new THREE.MeshBasicMaterial({color:new THREE.Color(16746632),wireframe:!0,depthTest:!1,depthWrite:!1,opacity:.25,transparent:!0})),this.materials.push(new THREE.MeshBasicMaterial({color:new THREE.Color(8978312),wireframe:!0,depthTest:!1,depthWrite:!1,opacity:.25,transparent:!0})),this.materials.push(new THREE.MeshBasicMaterial({color:new THREE.Color(8947967),wireframe:!0,depthTest:!1,depthWrite:!1,opacity:.25,transparent:!0})),this._init()}updateMatrixWorld(t){var e=this.root;if(this.visible){var r=this.physics.bodies;a.copy(e.matrixWorld).decompose(s,o,n).compose(s,o,n.set(1,1,1)).invert();for(var i=0,h=r.length;i<h;i++){var l=r[i].body,m=this.children[i],c=l.getCenterOfMassTransform(),u=c.getOrigin(),p=c.getRotation();m.position.set(u.x(),u.y(),u.z()).applyMatrix4(a),m.quaternion.setFromRotationMatrix(a).multiply(o.set(p.x(),p.y(),p.z(),p.w()))}}this.matrix.copy(e.matrixWorld).decompose(s,o,n).compose(s,o,n.set(1,1,1)),super.updateMatrixWorld(t)}_init(){var t=this.physics.bodies;function e(t){switch(t.shapeType){case 0:return new THREE.SphereGeometry(t.width,16,8);case 1:return new THREE.BoxGeometry(2*t.width,2*t.height,2*t.depth,8,8,8);case 2:return new r(t.width,t.height,16,8);default:return null}}function r(t,e,r,i){var s=new THREE.CylinderGeometry(t,t,e,r,i,!0),o=new THREE.Mesh(new THREE.SphereGeometry(t,r,i,0,2*Math.PI,0,Math.PI/2)),n=new THREE.Mesh(new THREE.SphereGeometry(t,r,i,0,2*Math.PI,Math.PI/2,Math.PI/2));return o.position.set(0,e/2,0),n.position.set(0,-e/2,0),o.updateMatrix(),n.updateMatrix(),s.merge(o.geometry,o.matrix),s.merge(n.geometry,n.matrix),s}for(var i=0,s=t.length;i<s;i++){var o=t[i].params;this.add(new THREE.Mesh(e(o),this.materials[o.type]))}}}THREE.MMDPhysics=t})();