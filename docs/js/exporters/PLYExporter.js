(function(){class t{parse(t,e,n){function i(e){t.traverse((function(t){if(!0===t.isMesh){const n=t,i=n.geometry;if(!0!==i.isBufferGeometry)throw new Error("THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.");!0===i.hasAttribute("position")&&e(n,i)}}))}e&&"object"===typeof e&&(console.warn('THREE.PLYExporter: The options parameter is now the third argument to the "parse" function. See the documentation for the new API.'),n=e,e=void 0);const o={binary:!1,excludeAttributes:[],littleEndian:!1};n=Object.assign(o,n);const r=n.excludeAttributes;let l=!1,a=!1,s=!1,u=0,f=0;t.traverse((function(t){if(!0===t.isMesh){const e=t,n=e.geometry;if(!0!==n.isBufferGeometry)throw new Error("THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.");const i=n.getAttribute("position"),o=n.getAttribute("normal"),r=n.getAttribute("uv"),c=n.getAttribute("color"),g=n.getIndex();if(void 0===i)return;u+=i.count,f+=g?g.count/3:i.count/3,void 0!==o&&(l=!0),void 0!==r&&(s=!0),void 0!==c&&(a=!0)}}));const c=-1===r.indexOf("index");if(l=l&&-1===r.indexOf("normal"),a=a&&-1===r.indexOf("color"),s=s&&-1===r.indexOf("uv"),c&&f!==Math.floor(f))return console.error("PLYExporter: Failed to generate a valid PLY file with triangle indices because the number of indices is not divisible by 3."),null;const g=4;let d=`ply\nformat ${n.binary?n.littleEndian?"binary_little_endian":"binary_big_endian":"ascii"} 1.0\nelement vertex ${u}\nproperty float x\nproperty float y\nproperty float z\n`;!0===l&&(d+="property float nx\nproperty float ny\nproperty float nz\n"),!0===s&&(d+="property float s\nproperty float t\n"),!0===a&&(d+="property uchar red\nproperty uchar green\nproperty uchar blue\n"),!0===c&&(d+=`element face ${f}\nproperty list uchar int vertex_index\n`),d+="end_header\n";const p=new THREE.Vector3,y=new THREE.Matrix3;let E=null;if(!0===n.binary){const t=(new TextEncoder).encode(d),e=u*(12+(l?12:0)+(a?3:0)+(s?8:0)),o=c?f*(3*g+1):0,r=new DataView(new ArrayBuffer(t.length+e+o));new Uint8Array(r.buffer).set(t,0);let x=t.length,b=t.length+e,m=0;i((function(t,e){const i=e.getAttribute("position"),o=e.getAttribute("normal"),u=e.getAttribute("uv"),f=e.getAttribute("color"),d=e.getIndex();y.getNormalMatrix(t.matrixWorld);for(let c=0,g=i.count;c<g;c++)p.x=i.getX(c),p.y=i.getY(c),p.z=i.getZ(c),p.applyMatrix4(t.matrixWorld),r.setFloat32(x,p.x,n.littleEndian),x+=4,r.setFloat32(x,p.y,n.littleEndian),x+=4,r.setFloat32(x,p.z,n.littleEndian),x+=4,!0===l&&(null!=o?(p.x=o.getX(c),p.y=o.getY(c),p.z=o.getZ(c),p.applyMatrix3(y).normalize(),r.setFloat32(x,p.x,n.littleEndian),x+=4,r.setFloat32(x,p.y,n.littleEndian),x+=4,r.setFloat32(x,p.z,n.littleEndian),x+=4):(r.setFloat32(x,0,n.littleEndian),x+=4,r.setFloat32(x,0,n.littleEndian),x+=4,r.setFloat32(x,0,n.littleEndian),x+=4)),!0===s&&(null!=u?(r.setFloat32(x,u.getX(c),n.littleEndian),x+=4,r.setFloat32(x,u.getY(c),n.littleEndian),x+=4):!1!==s&&(r.setFloat32(x,0,n.littleEndian),x+=4,r.setFloat32(x,0,n.littleEndian),x+=4)),!0===a&&(null!=f?(r.setUint8(x,Math.floor(255*f.getX(c))),x+=1,r.setUint8(x,Math.floor(255*f.getY(c))),x+=1,r.setUint8(x,Math.floor(255*f.getZ(c))),x+=1):(r.setUint8(x,255),x+=1,r.setUint8(x,255),x+=1,r.setUint8(x,255),x+=1));if(!0===c)if(null!==d)for(let l=0,a=d.count;l<a;l+=3)r.setUint8(b,3),b+=1,r.setUint32(b,d.getX(l+0)+m,n.littleEndian),b+=g,r.setUint32(b,d.getX(l+1)+m,n.littleEndian),b+=g,r.setUint32(b,d.getX(l+2)+m,n.littleEndian),b+=g;else for(let l=0,a=i.count;l<a;l+=3)r.setUint8(b,3),b+=1,r.setUint32(b,m+l,n.littleEndian),b+=g,r.setUint32(b,m+l+1,n.littleEndian),b+=g,r.setUint32(b,m+l+2,n.littleEndian),b+=g;m+=i.count})),E=r.buffer}else{let t=0,e="",n="";i((function(i,o){const r=o.getAttribute("position"),u=o.getAttribute("normal"),g=o.getAttribute("uv"),d=o.getAttribute("color"),E=o.getIndex();y.getNormalMatrix(i.matrixWorld);for(let t=0,n=r.count;t<n;t++){p.x=r.getX(t),p.y=r.getY(t),p.z=r.getZ(t),p.applyMatrix4(i.matrixWorld);let n=p.x+" "+p.y+" "+p.z;!0===l&&(null!=u?(p.x=u.getX(t),p.y=u.getY(t),p.z=u.getZ(t),p.applyMatrix3(y).normalize(),n+=" "+p.x+" "+p.y+" "+p.z):n+=" 0 0 0"),!0===s&&(null!=g?n+=" "+g.getX(t)+" "+g.getY(t):!1!==s&&(n+=" 0 0")),!0===a&&(n+=null!=d?" "+Math.floor(255*d.getX(t))+" "+Math.floor(255*d.getY(t))+" "+Math.floor(255*d.getZ(t)):" 255 255 255"),e+=n+"\n"}if(!0===c){if(null!==E)for(let e=0,i=E.count;e<i;e+=3)n+=`3 ${E.getX(e+0)+t}`,n+=` ${E.getX(e+1)+t}`,n+=` ${E.getX(e+2)+t}\n`;else for(let e=0,i=r.count;e<i;e+=3)n+=`3 ${t+e} ${t+e+1} ${t+e+2}\n`;f+=E?E.count/3:r.count/3}t+=r.count})),E=`${d}${e}${c?`${n}\n`:"\n"}`}return"function"===typeof e&&requestAnimationFrame((()=>e(E))),E}}THREE.PLYExporter=t})();