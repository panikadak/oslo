(function(){const t={klein:function(t,s,a){let n,o;s*=Math.PI,t*=2*Math.PI,s*=2,s<Math.PI?(n=3*Math.cos(s)*(1+Math.sin(s))+2*(1-Math.cos(s)/2)*Math.cos(s)*Math.cos(t),o=-8*Math.sin(s)-2*(1-Math.cos(s)/2)*Math.sin(s)*Math.cos(t)):(n=3*Math.cos(s)*(1+Math.sin(s))+2*(1-Math.cos(s)/2)*Math.cos(t+Math.PI),o=-8*Math.sin(s));const e=-2*(1-Math.cos(s)/2)*Math.sin(t);a.set(n,e,o)},plane:function(t,s){return function(a,n,o){const e=a*t,h=0,c=n*s;o.set(e,h,c)}},mobius:function(t,s,a){t-=.5;const n=2*Math.PI*s,o=2,e=Math.cos(n)*(o+t*Math.cos(n/2)),h=Math.sin(n)*(o+t*Math.cos(n/2)),c=t*Math.sin(n/2);a.set(e,h,c)},mobius3d:function(t,s,a){t*=Math.PI,s*=2*Math.PI,t*=2;const n=t/2,o=2.25,e=.125,h=.65;let c=e*Math.cos(s)*Math.cos(n)-h*Math.sin(s)*Math.sin(n);const i=e*Math.cos(s)*Math.sin(n)+h*Math.sin(s)*Math.cos(n),M=(o+c)*Math.sin(t);c=(o+c)*Math.cos(t),a.set(c,M,i)}};t.TubeGeometry=class extends THREE.ParametricGeometry{constructor(t,s=64,a=1,n=8,o=!1){const e=s+1,h=t.computeFrenetFrames(s,o),c=h.tangents,i=h.normals,M=h.binormals,r=new THREE.Vector3;function u(s,n,o){n*=2*Math.PI;const h=Math.floor(s*(e-1));t.getPointAt(s,r);const c=i[h],u=M[h],m=-a*Math.cos(n),l=a*Math.sin(n);r.x+=m*c.x+l*u.x,r.y+=m*c.y+l*u.y,r.z+=m*c.z+l*u.z,o.copy(r)}super(u,s,n),this.tangents=c,this.normals=i,this.binormals=M,this.path=t,this.segments=s,this.radius=a,this.segmentsRadius=n,this.closed=o}},t.TorusKnotGeometry=class extends t.TubeGeometry{constructor(t=200,s=40,a=64,n=8,o=2,e=3){class h extends THREE.Curve{getPoint(s,a=new THREE.Vector3){const n=a;s*=2*Math.PI;const h=.5,c=(1+h*Math.cos(e*s))*Math.cos(o*s),i=(1+h*Math.cos(e*s))*Math.sin(o*s),M=h*Math.sin(e*s);return n.set(c,i,M).multiplyScalar(t)}}const c=a,i=n,M=new h;super(M,c,s,i,!0,!1),this.radius=t,this.tube=s,this.segmentsT=a,this.segmentsR=n,this.p=o,this.q=e}},t.SphereGeometry=class extends THREE.ParametricGeometry{constructor(t,s,a){function n(s,a,n){s*=Math.PI,a*=2*Math.PI;var o=t*Math.sin(s)*Math.cos(a),e=t*Math.sin(s)*Math.sin(a),h=t*Math.cos(s);n.set(o,e,h)}super(n,s,a)}},t.PlaneGeometry=class extends THREE.ParametricGeometry{constructor(t,s,a,n){function o(a,n,o){const e=a*t,h=0,c=n*s;o.set(e,h,c)}super(o,a,n)}},THREE.ParametricGeometries=t})();