(function(){class e extends THREE.Group{constructor(e){super(),this.csm=e,this.displayFrustum=!0,this.displayPlanes=!0,this.displayShadowBounds=!0;const s=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),t=new Float32Array(24),i=new THREE.BufferGeometry;i.setIndex(new THREE.BufferAttribute(s,1)),i.setAttribute("position",new THREE.BufferAttribute(t,3,!1));const a=new THREE.LineSegments(i,new THREE.LineBasicMaterial);this.add(a),this.frustumLines=a,this.cascadeLines=[],this.cascadePlanes=[],this.shadowLines=[]}updateVisibility(){const e=this.displayFrustum,s=this.displayPlanes,t=this.displayShadowBounds,i=this.frustumLines,a=this.cascadeLines,o=this.cascadePlanes,n=this.shadowLines;for(let r=0,c=a.length;r<c;r++){const i=a[r],c=o[r],h=n[r];i.visible=e,c.visible=e&&s,h.visible=t}i.visible=e}update(){const e=this.csm,s=e.camera,t=e.cascades,i=e.mainFrustum,a=e.frustums,o=e.lights,n=this.frustumLines,r=n.geometry.getAttribute("position"),c=this.cascadeLines,h=this.cascadePlanes,d=this.shadowLines;this.position.copy(s.position),this.quaternion.copy(s.quaternion),this.scale.copy(s.scale),this.updateMatrixWorld(!0);while(c.length>t)this.remove(c.pop()),this.remove(h.pop()),this.remove(d.pop());while(c.length<t){const e=new THREE.Box3Helper(new THREE.Box3,16777215),s=new THREE.MeshBasicMaterial({transparent:!0,opacity:.1,depthWrite:!1,side:THREE.DoubleSide}),t=new THREE.Mesh(new THREE.PlaneGeometry,s),i=new THREE.Group,a=new THREE.Box3Helper(new THREE.Box3,16776960);i.add(a),this.add(e),this.add(t),this.add(i),c.push(e),h.push(t),d.push(i)}for(let u=0;u<t;u++){const e=a[u],s=o[u],t=s.shadow.camera,i=e.vertices.far,n=c[u],r=h[u],p=d[u],l=p.children[0];n.box.min.copy(i[2]),n.box.max.copy(i[0]),n.box.max.z+=1e-4,r.position.addVectors(i[0],i[2]),r.position.multiplyScalar(.5),r.scale.subVectors(i[0],i[2]),r.scale.z=1e-4,this.remove(p),p.position.copy(t.position),p.quaternion.copy(t.quaternion),p.scale.copy(t.scale),p.updateMatrixWorld(!0),this.attach(p),l.box.min.set(t.bottom,t.left,-t.far),l.box.max.set(t.top,t.right,-t.near)}const p=i.vertices.near,l=i.vertices.far;r.setXYZ(0,l[0].x,l[0].y,l[0].z),r.setXYZ(1,l[3].x,l[3].y,l[3].z),r.setXYZ(2,l[2].x,l[2].y,l[2].z),r.setXYZ(3,l[1].x,l[1].y,l[1].z),r.setXYZ(4,p[0].x,p[0].y,p[0].z),r.setXYZ(5,p[3].x,p[3].y,p[3].z),r.setXYZ(6,p[2].x,p[2].y,p[2].z),r.setXYZ(7,p[1].x,p[1].y,p[1].z),r.needsUpdate=!0}}THREE.CSMHelper=e})();