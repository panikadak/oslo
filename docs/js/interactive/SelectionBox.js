(function(){const t=new THREE.Frustum,e=new THREE.Vector3,r=new THREE.Vector3,o=new THREE.Vector3,n=new THREE.Vector3,s=new THREE.Vector3,i=new THREE.Vector3,a=new THREE.Vector3,c=new THREE.Vector3,h=new THREE.Vector3,m=new THREE.Vector3,l=new THREE.Vector3,p=new THREE.Vector3,u=new THREE.Vector3,E=new THREE.Vector3,d=new THREE.Matrix4,y=new THREE.Quaternion,x=new THREE.Vector3;class P{constructor(t,e,r=Number.MAX_VALUE){this.camera=t,this.scene=e,this.startPoint=new THREE.Vector3,this.endPoint=new THREE.Vector3,this.collection=[],this.instances={},this.deep=r}select(e,r){return this.startPoint=e||this.startPoint,this.endPoint=r||this.endPoint,this.collection=[],this.updateFrustum(this.startPoint,this.endPoint),this.searchChildInFrustum(t,this.scene),this.collection}updateFrustum(e,d){if(e=e||this.startPoint,d=d||this.endPoint,e.x===d.x&&(d.x+=Number.EPSILON),e.y===d.y&&(d.y+=Number.EPSILON),this.camera.updateProjectionMatrix(),this.camera.updateMatrixWorld(),this.camera.isPerspectiveCamera){r.copy(e),r.x=Math.min(e.x,d.x),r.y=Math.max(e.y,d.y),d.x=Math.max(e.x,d.x),d.y=Math.min(e.y,d.y),o.setFromMatrixPosition(this.camera.matrixWorld),n.copy(r),s.set(d.x,r.y,0),i.copy(d),a.set(r.x,d.y,0),n.unproject(this.camera),s.unproject(this.camera),i.unproject(this.camera),a.unproject(this.camera),p.copy(n).sub(o),u.copy(s).sub(o),E.copy(i).sub(o),p.normalize(),u.normalize(),E.normalize(),p.multiplyScalar(this.deep),u.multiplyScalar(this.deep),E.multiplyScalar(this.deep),p.add(o),u.add(o),E.add(o);const c=t.planes;c[0].setFromCoplanarPoints(o,n,s),c[1].setFromCoplanarPoints(o,s,i),c[2].setFromCoplanarPoints(i,a,o),c[3].setFromCoplanarPoints(a,n,o),c[4].setFromCoplanarPoints(s,i,a),c[5].setFromCoplanarPoints(E,u,p),c[5].normal.multiplyScalar(-1)}else if(this.camera.isOrthographicCamera){const r=Math.min(e.x,d.x),o=Math.max(e.y,d.y),p=Math.max(e.x,d.x),u=Math.min(e.y,d.y);n.set(r,o,-1),s.set(p,o,-1),i.set(p,u,-1),a.set(r,u,-1),c.set(r,o,1),h.set(p,o,1),m.set(p,u,1),l.set(r,u,1),n.unproject(this.camera),s.unproject(this.camera),i.unproject(this.camera),a.unproject(this.camera),c.unproject(this.camera),h.unproject(this.camera),m.unproject(this.camera),l.unproject(this.camera);const E=t.planes;E[0].setFromCoplanarPoints(n,c,h),E[1].setFromCoplanarPoints(s,h,m),E[2].setFromCoplanarPoints(m,l,a),E[3].setFromCoplanarPoints(l,c,n),E[4].setFromCoplanarPoints(s,i,a),E[5].setFromCoplanarPoints(m,h,c),E[5].normal.multiplyScalar(-1)}else console.error("THREE.SelectionBox: Unsupported camera type.")}searchChildInFrustum(t,r){if(r.isMesh||r.isLine||r.isPoints)if(r.isInstancedMesh){this.instances[r.uuid]=[];for(let o=0;o<r.count;o++)r.getMatrixAt(o,d),d.decompose(e,y,x),e.applyMatrix4(r.matrixWorld),t.containsPoint(e)&&this.instances[r.uuid].push(o)}else null===r.geometry.boundingSphere&&r.geometry.computeBoundingSphere(),e.copy(r.geometry.boundingSphere.center),e.applyMatrix4(r.matrixWorld),t.containsPoint(e)&&this.collection.push(r);if(r.children.length>0)for(let e=0;e<r.children.length;e++)this.searchChildInFrustum(t,r.children[e])}}THREE.SelectionBox=P})();