(function(){class e extends THREE.Mesh{constructor(t,r={}){super(t),this.type="Refractor";const n=this,a=void 0!==r.color?new THREE.Color(r.color):new THREE.Color(8355711),o=r.textureWidth||512,i=r.textureHeight||512,l=r.clipBias||0,s=r.shader||e.RefractorShader,c=new THREE.PerspectiveCamera;c.matrixAutoUpdate=!1,c.userData.refractor=!0;const u=new THREE.Plane,d=new THREE.Matrix4,m={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat},E=new THREE.WebGLRenderTarget(o,i,m);THREE.MathUtils.isPowerOfTwo(o)&&THREE.MathUtils.isPowerOfTwo(i)||(E.texture.generateMipmaps=!1),this.material=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(s.uniforms),vertexShader:s.vertexShader,fragmentShader:s.fragmentShader,transparent:!0}),this.material.uniforms["color"].value=a,this.material.uniforms["tDiffuse"].value=E.texture,this.material.uniforms["textureMatrix"].value=d;const x=function(){const e=new THREE.Vector3,t=new THREE.Vector3,r=new THREE.Matrix4,a=new THREE.Vector3,o=new THREE.Vector3;return function(i){return e.setFromMatrixPosition(n.matrixWorld),t.setFromMatrixPosition(i.matrixWorld),a.subVectors(e,t),r.extractRotation(n.matrixWorld),o.set(0,0,1),o.applyMatrix4(r),a.dot(o)<0}}(),f=function(){const e=new THREE.Vector3,t=new THREE.Vector3,r=new THREE.Quaternion,a=new THREE.Vector3;return function(){n.matrixWorld.decompose(t,r,a),e.set(0,0,1).applyQuaternion(r).normalize(),e.negate(),u.setFromNormalAndCoplanarPoint(e,t)}}(),v=function(){const e=new THREE.Plane,t=new THREE.Vector4,r=new THREE.Vector4;return function(n){c.matrixWorld.copy(n.matrixWorld),c.matrixWorldInverse.copy(c.matrixWorld).invert(),c.projectionMatrix.copy(n.projectionMatrix),c.far=n.far,e.copy(u),e.applyMatrix4(c.matrixWorldInverse),t.set(e.normal.x,e.normal.y,e.normal.z,e.constant);const a=c.projectionMatrix;r.x=(Math.sign(t.x)+a.elements[8])/a.elements[0],r.y=(Math.sign(t.y)+a.elements[9])/a.elements[5],r.z=-1,r.w=(1+a.elements[10])/a.elements[14],t.multiplyScalar(2/t.dot(r)),a.elements[2]=t.x,a.elements[6]=t.y,a.elements[10]=t.z+1-l,a.elements[14]=t.w}}();function p(e){d.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),d.multiply(e.projectionMatrix),d.multiply(e.matrixWorldInverse),d.multiply(n.matrixWorld)}function R(e,t,r){n.visible=!1;const a=e.getRenderTarget(),o=e.xr.enabled,i=e.shadowMap.autoUpdate;e.xr.enabled=!1,e.shadowMap.autoUpdate=!1,e.setRenderTarget(E),!1===e.autoClear&&e.clear(),e.render(t,c),e.xr.enabled=o,e.shadowMap.autoUpdate=i,e.setRenderTarget(a);const l=r.viewport;void 0!==l&&e.state.viewport(l),n.visible=!0}this.onBeforeRender=function(e,t,r){E.texture.encoding=e.outputEncoding,!0!==r.userData.refractor&&!0!==!x(r)&&(f(),p(r),v(r),R(e,t,r))},this.getRenderTarget=function(){return E},this.dispose=function(){E.dispose(),n.material.dispose()}}}e.prototype.isRefractor=!0,e.RefractorShader={uniforms:{color:{value:null},tDiffuse:{value:null},textureMatrix:{value:null}},vertexShader:"\n\n\t\tuniform mat4 textureMatrix;\n\n\t\tvarying vec4 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = textureMatrix * vec4( position, 1.0 );\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}",fragmentShader:"\n\n\t\tuniform vec3 color;\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec4 vUv;\n\n\t\tfloat blendOverlay( float base, float blend ) {\n\n\t\t\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n\n\t\t}\n\n\t\tvec3 blendOverlay( vec3 base, vec3 blend ) {\n\n\t\t\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec4 base = texture2DProj( tDiffuse, vUv );\n\t\t\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\n\n\t\t}"},THREE.Refractor=e})();