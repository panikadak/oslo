(function(){class t extends THREE.Curve{constructor(t,s,n,o,i){super(),this.degree=t,this.knots=s,this.controlPoints=[],this.startKnot=o||0,this.endKnot=i||this.knots.length-1;for(let e=0;e<n.length;++e){const t=n[e];this.controlPoints[e]=new THREE.Vector4(t.x,t.y,t.z,t.w)}}getPoint(t,s=new THREE.Vector3){const n=s,o=this.knots[this.startKnot]+t*(this.knots[this.endKnot]-this.knots[this.startKnot]),i=THREE.NURBSUtils.calcBSplinePoint(this.degree,this.knots,this.controlPoints,o);return 1!==i.w&&i.divideScalar(i.w),n.set(i.x,i.y,i.z)}getTangent(t,s=new THREE.Vector3){const n=s,o=this.knots[0]+t*(this.knots[this.knots.length-1]-this.knots[0]),i=THREE.NURBSUtils.calcNURBSDerivatives(this.degree,this.knots,this.controlPoints,o,1);return n.copy(i[1]).normalize(),n}}THREE.NURBSCurve=t})();