(function(){let e=null;function t(){if(null===e){const t=new ArrayBuffer(2),r=new Uint8Array(t),n=new Uint16Array(t);r[0]=170,r[1]=187,e=43707===n[0]}return e}const r=[null,Float32Array,null,Int8Array,Int16Array,null,Int32Array,Uint8Array,Uint16Array,null,Uint32Array],n={Uint16Array:"getUint16",Uint32Array:"getUint32",Int16Array:"getInt16",Int32Array:"getInt32",Float32Array:"getFloat32",Float64Array:"getFloat64"};function o(e,r,o,a,i){const s=r.BYTES_PER_ELEMENT;let l;if(i===t()||1===s)l=new r(e,o,a);else{const t=new DataView(e,o,a*s),c=n[r.name],u=!i;l=new r(a);for(let e=0;e<a;e++)l[e]=t[c](e*s,u)}return l}function a(e){const t=new Uint8Array(e),n=t[0];let a=t[1];const i=!!(a>>7&1),s=a>>6&1,l=1===(a>>5&1),c=31&a;let u=0,d=0;if(l?(u=(t[2]<<16)+(t[3]<<8)+t[4],d=(t[5]<<16)+(t[6]<<8)+t[7]):(u=t[2]+(t[3]<<8)+(t[4]<<16),d=t[5]+(t[6]<<8)+(t[7]<<16)),0===n)throw new Error("PRWM decoder: Invalid format version: 0");if(1!==n)throw new Error("PRWM decoder: Unsupported format version: "+n);if(!i){if(0!==s)throw new Error("PRWM decoder: Indices type must be set to 0 for non-indexed geometries");if(0!==d)throw new Error("PRWM decoder: Number of indices must be set to 0 for non-indexed geometries")}let f=8;const y={};for(let w=0;w<c;w++){let n="";while(f<t.length){const e=t[f];if(f++,0===e)break;n+=String.fromCharCode(e)}a=t[f];const i=a>>7&1,s=1+(a>>4&3),c=15&a,d=r[c];f++,f=4*Math.ceil(f/4);const E=o(e,d,f,s*u,l);f+=d.BYTES_PER_ELEMENT*s*u,y[n]={type:i,cardinality:s,values:E}}f=4*Math.ceil(f/4);let E=null;return i&&(E=o(e,1===s?Uint32Array:Uint16Array,f,d,l)),{version:n,attributes:y,indices:E}}class i extends THREE.Loader{constructor(e){super(e)}load(e,r,n,o){const a=this,i=new THREE.FileLoader(a.manager);i.setPath(a.path),i.setResponseType("arraybuffer"),i.setRequestHeader(a.requestHeader),i.setWithCredentials(a.withCredentials),e=e.replace(/\*/g,t()?"be":"le"),i.load(e,(function(t){try{r(a.parse(t))}catch(n){o?o(n):console.error(n),a.manager.itemError(e)}}),n,o)}parse(e){const t=a(e),r=Object.keys(t.attributes),n=new THREE.BufferGeometry;for(let o=0;o<r.length;o++){const e=t.attributes[r[o]];n.setAttribute(r[o],new THREE.BufferAttribute(e.values,e.cardinality,e.normalized))}return null!==t.indices&&n.setIndex(new THREE.BufferAttribute(t.indices,1)),n}static isBigEndianPlatform(){return t()}}THREE.PRWMLoader=i})();