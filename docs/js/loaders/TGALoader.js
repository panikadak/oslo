(function(){class e extends THREE.DataTextureLoader{constructor(e){super(e)}parse(e){function r(e){switch(e.image_type){case p:case u:(e.colormap_length>256||24!==e.colormap_size||1!==e.colormap_type)&&console.error("THREE.TGALoader: Invalid type colormap data for indexed type.");break;case h:case f:case _:case g:e.colormap_type&&console.error("THREE.TGALoader: Invalid type colormap data for colormap type.");break;case d:console.error("THREE.TGALoader: No data.");default:console.error('THREE.TGALoader: Invalid type "%s".',e.image_type)}(e.width<=0||e.height<=0)&&console.error("THREE.TGALoader: Invalid image size."),8!==e.pixel_size&&16!==e.pixel_size&&24!==e.pixel_size&&32!==e.pixel_size&&console.error('THREE.TGALoader: Invalid pixel size "%s".',e.pixel_size)}function t(e,r,t,a,o){let i,n;const s=t.pixel_size>>3,c=t.width*t.height*s;if(r&&(n=o.subarray(a,a+=t.colormap_length*(t.colormap_size>>3))),e){let e,r,t;i=new Uint8Array(c);let n=0;const l=new Uint8Array(s);while(n<c)if(e=o[a++],r=1+(127&e),128&e){for(t=0;t<s;++t)l[t]=o[a++];for(t=0;t<r;++t)i.set(l,n+t*s);n+=s*r}else{for(r*=s,t=0;t<r;++t)i[n+t]=o[a++];n+=r}}else i=o.subarray(a,a+=r?t.width*t.height:c);return{pixel_data:i,palettes:n}}function a(e,r,t,a,o,i,n,s,c){const l=c;let d,p,h,f=0;const u=A.width;for(h=r;h!==a;h+=t)for(p=o;p!==n;p+=i,f++)d=s[f],e[4*(p+u*h)+3]=255,e[4*(p+u*h)+2]=l[3*d+0],e[4*(p+u*h)+1]=l[3*d+1],e[4*(p+u*h)+0]=l[3*d+2];return e}function o(e,r,t,a,o,i,n,s){let c,l,d,p=0;const h=A.width;for(d=r;d!==a;d+=t)for(l=o;l!==n;l+=i,p+=2)c=s[p+0]+(s[p+1]<<8),e[4*(l+h*d)+0]=(31744&c)>>7,e[4*(l+h*d)+1]=(992&c)>>2,e[4*(l+h*d)+2]=(31&c)<<3,e[4*(l+h*d)+3]=32768&c?0:255;return e}function i(e,r,t,a,o,i,n,s){let c,l,d=0;const p=A.width;for(l=r;l!==a;l+=t)for(c=o;c!==n;c+=i,d+=3)e[4*(c+p*l)+3]=255,e[4*(c+p*l)+2]=s[d+0],e[4*(c+p*l)+1]=s[d+1],e[4*(c+p*l)+0]=s[d+2];return e}function n(e,r,t,a,o,i,n,s){let c,l,d=0;const p=A.width;for(l=r;l!==a;l+=t)for(c=o;c!==n;c+=i,d+=4)e[4*(c+p*l)+2]=s[d+0],e[4*(c+p*l)+1]=s[d+1],e[4*(c+p*l)+0]=s[d+2],e[4*(c+p*l)+3]=s[d+3];return e}function s(e,r,t,a,o,i,n,s){let c,l,d,p=0;const h=A.width;for(d=r;d!==a;d+=t)for(l=o;l!==n;l+=i,p++)c=s[p],e[4*(l+h*d)+0]=c,e[4*(l+h*d)+1]=c,e[4*(l+h*d)+2]=c,e[4*(l+h*d)+3]=255;return e}function c(e,r,t,a,o,i,n,s){let c,l,d=0;const p=A.width;for(l=r;l!==a;l+=t)for(c=o;c!==n;c+=i,d+=2)e[4*(c+p*l)+0]=s[d+0],e[4*(c+p*l)+1]=s[d+0],e[4*(c+p*l)+2]=s[d+0],e[4*(c+p*l)+3]=s[d+1];return e}function l(e,r,t,l,d){let p,h,f,u,_,g;switch((A.flags&E)>>T){default:case b:p=0,f=1,_=r,h=0,u=1,g=t;break;case w:p=0,f=1,_=r,h=t-1,u=-1,g=-1;break;case k:p=r-1,f=-1,_=-1,h=0,u=1,g=t;break;case m:p=r-1,f=-1,_=-1,h=t-1,u=-1,g=-1;break}if(H)switch(A.pixel_size){case 8:s(e,h,u,g,p,f,_,l);break;case 16:c(e,h,u,g,p,f,_,l);break;default:console.error("THREE.TGALoader: Format not supported.");break}else switch(A.pixel_size){case 8:a(e,h,u,g,p,f,_,l,d);break;case 16:o(e,h,u,g,p,f,_,l);break;case 24:i(e,h,u,g,p,f,_,l);break;case 32:n(e,h,u,g,p,f,_,l);break;default:console.error("THREE.TGALoader: Format not supported.");break}return e}const d=0,p=1,h=2,f=3,u=9,_=10,g=11,E=48,T=4,w=0,m=1,b=2,k=3;e.length<19&&console.error("THREE.TGALoader: Not enough data to contain header.");let y=0;const x=new Uint8Array(e),A={id_length:x[y++],colormap_type:x[y++],image_type:x[y++],colormap_index:x[y++]|x[y++]<<8,colormap_length:x[y++]|x[y++]<<8,colormap_size:x[y++],origin:[x[y++]|x[y++]<<8,x[y++]|x[y++]<<8],width:x[y++]|x[y++]<<8,height:x[y++]|x[y++]<<8,pixel_size:x[y++],flags:x[y++]};r(A),A.id_length+y>e.length&&console.error("THREE.TGALoader: No data."),y+=A.id_length;let z=!1,L=!1,H=!1;switch(A.image_type){case u:z=!0,L=!0;break;case p:L=!0;break;case _:z=!0;break;case h:break;case g:z=!0,H=!0;break;case f:H=!0;break}const R=new Uint8Array(A.width*A.height*4),G=t(z,L,A,y,x);return l(R,A.width,A.height,G.pixel_data,G.palettes),{data:R,width:A.width,height:A.height,flipY:!0,generateMipmaps:!0,minFilter:THREE.LinearMipmapLinearFilter}}}THREE.TGALoader=e})();