(function(){class e extends THREE.Pass{constructor(e,t,a=1){super(),this.camera=e,this.needsSwap=!1,this.cubeShader=THREE.ShaderLib["cube"],this.cubeMesh=new THREE.Mesh(new THREE.BoxGeometry(10,10,10),new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(this.cubeShader.uniforms),vertexShader:this.cubeShader.vertexShader,fragmentShader:this.cubeShader.fragmentShader,depthTest:!1,depthWrite:!1,side:THREE.BackSide})),Object.defineProperty(this.cubeMesh.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),this.envMap=t,this.opacity=a,this.cubeScene=new THREE.Scene,this.cubeCamera=new THREE.PerspectiveCamera,this.cubeScene.add(this.cubeMesh)}render(e,t,a){const r=e.autoClear;e.autoClear=!1,this.cubeCamera.projectionMatrix.copy(this.camera.projectionMatrix),this.cubeCamera.quaternion.setFromRotationMatrix(this.camera.matrixWorld),this.cubeMesh.material.uniforms.envMap.value=this.envMap,this.cubeMesh.material.uniforms.flipEnvMap.value=this.envMap.isCubeTexture&&!1===this.envMap.isRenderTargetTexture?-1:1,this.cubeMesh.material.uniforms.opacity.value=this.opacity,this.cubeMesh.material.transparent=this.opacity<1,e.setRenderTarget(this.renderToScreen?null:a),this.clear&&e.clear(),e.render(this.cubeScene,this.cubeCamera),e.autoClear=r}}THREE.CubeTexturePass=e})();