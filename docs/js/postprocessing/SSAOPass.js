(function(){class e extends THREE.Pass{constructor(e,r,t,a){super(),this.width=void 0!==t?t:512,this.height=void 0!==a?a:512,this.clear=!0,this.camera=r,this.scene=e,this.kernelRadius=8,this.kernelSize=32,this.kernel=[],this.noiseTexture=null,this.output=0,this.minDistance=.005,this.maxDistance=.1,this._visibilityCache=new Map,this.generateSampleKernel(),this.generateRandomKernelRotations();const i=new THREE.DepthTexture;i.type=THREE.UnsignedShortType,this.beautyRenderTarget=new THREE.WebGLRenderTarget(this.width,this.height,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat}),this.normalRenderTarget=new THREE.WebGLRenderTarget(this.width,this.height,{minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat,depthTexture:i}),this.ssaoRenderTarget=new THREE.WebGLRenderTarget(this.width,this.height,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat}),this.blurRenderTarget=this.ssaoRenderTarget.clone(),void 0===THREE.SSAOShader&&console.error("THREE.SSAOPass: The pass relies on THREE.SSAOShader."),this.ssaoMaterial=new THREE.ShaderMaterial({defines:Object.assign({},THREE.SSAOShader.defines),uniforms:THREE.UniformsUtils.clone(THREE.SSAOShader.uniforms),vertexShader:THREE.SSAOShader.vertexShader,fragmentShader:THREE.SSAOShader.fragmentShader,blending:THREE.NoBlending}),this.ssaoMaterial.uniforms["tDiffuse"].value=this.beautyRenderTarget.texture,this.ssaoMaterial.uniforms["tNormal"].value=this.normalRenderTarget.texture,this.ssaoMaterial.uniforms["tDepth"].value=this.normalRenderTarget.depthTexture,this.ssaoMaterial.uniforms["tNoise"].value=this.noiseTexture,this.ssaoMaterial.uniforms["kernel"].value=this.kernel,this.ssaoMaterial.uniforms["cameraNear"].value=this.camera.near,this.ssaoMaterial.uniforms["cameraFar"].value=this.camera.far,this.ssaoMaterial.uniforms["resolution"].value.set(this.width,this.height),this.ssaoMaterial.uniforms["cameraProjectionMatrix"].value.copy(this.camera.projectionMatrix),this.ssaoMaterial.uniforms["cameraInverseProjectionMatrix"].value.copy(this.camera.projectionMatrixInverse),this.normalMaterial=new THREE.MeshNormalMaterial,this.normalMaterial.blending=THREE.NoBlending,this.blurMaterial=new THREE.ShaderMaterial({defines:Object.assign({},THREE.SSAOBlurShader.defines),uniforms:THREE.UniformsUtils.clone(THREE.SSAOBlurShader.uniforms),vertexShader:THREE.SSAOBlurShader.vertexShader,fragmentShader:THREE.SSAOBlurShader.fragmentShader}),this.blurMaterial.uniforms["tDiffuse"].value=this.ssaoRenderTarget.texture,this.blurMaterial.uniforms["resolution"].value.set(this.width,this.height),this.depthRenderMaterial=new THREE.ShaderMaterial({defines:Object.assign({},THREE.SSAODepthShader.defines),uniforms:THREE.UniformsUtils.clone(THREE.SSAODepthShader.uniforms),vertexShader:THREE.SSAODepthShader.vertexShader,fragmentShader:THREE.SSAODepthShader.fragmentShader,blending:THREE.NoBlending}),this.depthRenderMaterial.uniforms["tDepth"].value=this.normalRenderTarget.depthTexture,this.depthRenderMaterial.uniforms["cameraNear"].value=this.camera.near,this.depthRenderMaterial.uniforms["cameraFar"].value=this.camera.far,this.copyMaterial=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(THREE.CopyShader.uniforms),vertexShader:THREE.CopyShader.vertexShader,fragmentShader:THREE.CopyShader.fragmentShader,transparent:!0,depthTest:!1,depthWrite:!1,blendSrc:THREE.DstColorFactor,blendDst:THREE.ZeroFactor,blendEquation:THREE.AddEquation,blendSrcAlpha:THREE.DstAlphaFactor,blendDstAlpha:THREE.ZeroFactor,blendEquationAlpha:THREE.AddEquation}),this.fsQuad=new THREE.FullScreenQuad(null),this.originalClearColor=new THREE.Color}dispose(){this.beautyRenderTarget.dispose(),this.normalRenderTarget.dispose(),this.ssaoRenderTarget.dispose(),this.blurRenderTarget.dispose(),this.normalMaterial.dispose(),this.blurMaterial.dispose(),this.copyMaterial.dispose(),this.depthRenderMaterial.dispose(),this.fsQuad.dispose()}render(r,t){switch(r.setRenderTarget(this.beautyRenderTarget),r.clear(),r.render(this.scene,this.camera),this.overrideVisibility(),this.renderOverride(r,this.normalMaterial,this.normalRenderTarget,7829503,1),this.restoreVisibility(),this.ssaoMaterial.uniforms["kernelRadius"].value=this.kernelRadius,this.ssaoMaterial.uniforms["minDistance"].value=this.minDistance,this.ssaoMaterial.uniforms["maxDistance"].value=this.maxDistance,this.renderPass(r,this.ssaoMaterial,this.ssaoRenderTarget),this.renderPass(r,this.blurMaterial,this.blurRenderTarget),this.output){case e.OUTPUT.SSAO:this.copyMaterial.uniforms["tDiffuse"].value=this.ssaoRenderTarget.texture,this.copyMaterial.blending=THREE.NoBlending,this.renderPass(r,this.copyMaterial,this.renderToScreen?null:t);break;case e.OUTPUT.Blur:this.copyMaterial.uniforms["tDiffuse"].value=this.blurRenderTarget.texture,this.copyMaterial.blending=THREE.NoBlending,this.renderPass(r,this.copyMaterial,this.renderToScreen?null:t);break;case e.OUTPUT.Beauty:this.copyMaterial.uniforms["tDiffuse"].value=this.beautyRenderTarget.texture,this.copyMaterial.blending=THREE.NoBlending,this.renderPass(r,this.copyMaterial,this.renderToScreen?null:t);break;case e.OUTPUT.Depth:this.renderPass(r,this.depthRenderMaterial,this.renderToScreen?null:t);break;case e.OUTPUT.Normal:this.copyMaterial.uniforms["tDiffuse"].value=this.normalRenderTarget.texture,this.copyMaterial.blending=THREE.NoBlending,this.renderPass(r,this.copyMaterial,this.renderToScreen?null:t);break;case e.OUTPUT.Default:this.copyMaterial.uniforms["tDiffuse"].value=this.beautyRenderTarget.texture,this.copyMaterial.blending=THREE.NoBlending,this.renderPass(r,this.copyMaterial,this.renderToScreen?null:t),this.copyMaterial.uniforms["tDiffuse"].value=this.blurRenderTarget.texture,this.copyMaterial.blending=THREE.CustomBlending,this.renderPass(r,this.copyMaterial,this.renderToScreen?null:t);break;default:console.warn("THREE.SSAOPass: Unknown output type.")}}renderPass(e,r,t,a,i){e.getClearColor(this.originalClearColor);const s=e.getClearAlpha(),n=e.autoClear;e.setRenderTarget(t),e.autoClear=!1,void 0!==a&&null!==a&&(e.setClearColor(a),e.setClearAlpha(i||0),e.clear()),this.fsQuad.material=r,this.fsQuad.render(e),e.autoClear=n,e.setClearColor(this.originalClearColor),e.setClearAlpha(s)}renderOverride(e,r,t,a,i){e.getClearColor(this.originalClearColor);const s=e.getClearAlpha(),n=e.autoClear;e.setRenderTarget(t),e.autoClear=!1,a=r.clearColor||a,i=r.clearAlpha||i,void 0!==a&&null!==a&&(e.setClearColor(a),e.setClearAlpha(i||0),e.clear()),this.scene.overrideMaterial=r,e.render(this.scene,this.camera),this.scene.overrideMaterial=null,e.autoClear=n,e.setClearColor(this.originalClearColor),e.setClearAlpha(s)}setSize(e,r){this.width=e,this.height=r,this.beautyRenderTarget.setSize(e,r),this.ssaoRenderTarget.setSize(e,r),this.normalRenderTarget.setSize(e,r),this.blurRenderTarget.setSize(e,r),this.ssaoMaterial.uniforms["resolution"].value.set(e,r),this.ssaoMaterial.uniforms["cameraProjectionMatrix"].value.copy(this.camera.projectionMatrix),this.ssaoMaterial.uniforms["cameraInverseProjectionMatrix"].value.copy(this.camera.projectionMatrixInverse),this.blurMaterial.uniforms["resolution"].value.set(e,r)}generateSampleKernel(){const e=this.kernelSize,r=this.kernel;for(let t=0;t<e;t++){const a=new THREE.Vector3;a.x=2*Math.random()-1,a.y=2*Math.random()-1,a.z=Math.random(),a.normalize();let i=t/e;i=THREE.MathUtils.lerp(.1,1,i*i),a.multiplyScalar(i),r.push(a)}}generateRandomKernelRotations(){const e=4,r=4;void 0===THREE.SimplexNoise&&console.error("THREE.SSAOPass: The pass relies on THREE.SimplexNoise.");const t=new THREE.SimplexNoise,a=e*r,i=new Float32Array(4*a);for(let s=0;s<a;s++){const e=4*s,r=2*Math.random()-1,a=2*Math.random()-1,n=0,l=t.noise3d(r,a,n);i[e]=l,i[e+1]=l,i[e+2]=l,i[e+3]=1}this.noiseTexture=new THREE.DataTexture(i,e,r,THREE.RGBAFormat,THREE.FloatType),this.noiseTexture.wrapS=THREE.RepeatWrapping,this.noiseTexture.wrapT=THREE.RepeatWrapping,this.noiseTexture.needsUpdate=!0}overrideVisibility(){const e=this.scene,r=this._visibilityCache;e.traverse((function(e){r.set(e,e.visible),(e.isPoints||e.isLine)&&(e.visible=!1)}))}restoreVisibility(){const e=this.scene,r=this._visibilityCache;e.traverse((function(e){const t=r.get(e);e.visible=t})),r.clear()}}e.OUTPUT={Default:0,SSAO:1,Blur:2,Beauty:3,Depth:4,Normal:5},THREE.SSAOPass=e})();