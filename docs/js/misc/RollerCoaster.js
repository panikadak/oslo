(function(){class t extends THREE.BufferGeometry{constructor(t,e){super();const o=[],n=[],r=[],s=[1,1,1],a=[1,1,0],p=new THREE.Vector3(0,1,0),E=new THREE.Vector3,c=new THREE.Vector3,u=new THREE.Quaternion,y=new THREE.Quaternion;y.setFromAxisAngle(p,Math.PI/2);const i=new THREE.Vector3,h=new THREE.Vector3;h.copy(t.getPointAt(0));const l=[new THREE.Vector3(-.225,0,0),new THREE.Vector3(0,-.05,0),new THREE.Vector3(0,-.175,0),new THREE.Vector3(0,-.05,0),new THREE.Vector3(.225,0,0),new THREE.Vector3(0,-.175,0)],R=2*Math.PI;let T=5;const w=[];for(let P=0;P<T;P++){const t=P/T*R;w.push(new THREE.Vector3(.06*Math.sin(t),.06*Math.cos(t),0))}T=6;const H=[];for(let P=0;P<T;P++){const t=P/T*R;H.push(new THREE.Vector3(.025*Math.sin(t),.025*Math.cos(t),0))}const d=new THREE.Vector3,V=new THREE.Vector3;function x(t,e){V.set(0,0,-1).applyQuaternion(u);for(let s=0;s<t.length;s++)d.copy(t[s]),d.applyQuaternion(u),d.add(i),o.push(d.x,d.y,d.z),n.push(V.x,V.y,V.z),r.push(e[0],e[1],e[2]);V.set(0,0,1).applyQuaternion(u);for(let s=t.length-1;s>=0;s--)d.copy(t[s]),d.applyQuaternion(u),d.add(i),o.push(d.x,d.y,d.z),n.push(V.x,V.y,V.z),r.push(e[0],e[1],e[2])}const z=new THREE.Vector3,f=new THREE.Vector3,A=new THREE.Vector3,Q=new THREE.Vector3,m=new THREE.Vector3,M=new THREE.Vector3,b=new THREE.Vector3,g=new THREE.Vector3;function B(t,e,s){for(let a=0,p=t.length;a<p;a++){const E=t[a],c=t[(a+1)%p];z.copy(E).add(e),z.applyQuaternion(u),z.add(i),f.copy(c).add(e),f.applyQuaternion(u),f.add(i),A.copy(c).add(e),A.applyQuaternion(y),A.add(h),Q.copy(E).add(e),Q.applyQuaternion(y),Q.add(h),o.push(z.x,z.y,z.z),o.push(f.x,f.y,f.z),o.push(Q.x,Q.y,Q.z),o.push(f.x,f.y,f.z),o.push(A.x,A.y,A.z),o.push(Q.x,Q.y,Q.z),m.copy(E),m.applyQuaternion(u),m.normalize(),M.copy(c),M.applyQuaternion(u),M.normalize(),b.copy(c),b.applyQuaternion(y),b.normalize(),g.copy(E),g.applyQuaternion(y),g.normalize(),n.push(m.x,m.y,m.z),n.push(M.x,M.y,M.z),n.push(g.x,g.y,g.z),n.push(M.x,M.y,M.z),n.push(b.x,b.y,b.z),n.push(g.x,g.y,g.z),r.push(s[0],s[1],s[2]),r.push(s[0],s[1],s[2]),r.push(s[0],s[1],s[2]),r.push(s[0],s[1],s[2]),r.push(s[0],s[1],s[2]),r.push(s[0],s[1],s[2])}}const F=new THREE.Vector3;for(let P=1;P<=e;P++){i.copy(t.getPointAt(P/e)),p.set(0,1,0),E.subVectors(i,h).normalize(),c.crossVectors(p,E).normalize(),p.crossVectors(E,c);const o=Math.atan2(E.x,E.z);u.setFromAxisAngle(p,o),P%2===0&&x(l,a),B(w,F.set(0,-.125,0),a),B(H,F.set(.2,0,0),s),B(H,F.set(-.2,0,0),s),h.copy(i),y.copy(u)}this.setAttribute("position",new THREE.BufferAttribute(new Float32Array(o),3)),this.setAttribute("normal",new THREE.BufferAttribute(new Float32Array(n),3)),this.setAttribute("color",new THREE.BufferAttribute(new Float32Array(r),3))}}class e extends THREE.BufferGeometry{constructor(t,e){super();const o=[],n=[],r=new THREE.Quaternion,s=new THREE.Vector3(0,1,0),a=new THREE.Vector3,p=new THREE.Vector3,E=[new THREE.Vector3(0,.05,-.05),new THREE.Vector3(0,.05,.05),new THREE.Vector3(0,-.05,0)],c=[new THREE.Vector3(-.05,0,.05),new THREE.Vector3(-.05,0,-.05),new THREE.Vector3(.05,0,0)],u=[new THREE.Vector3(.05,0,-.05),new THREE.Vector3(.05,0,.05),new THREE.Vector3(-.05,0,0)],y=new THREE.Vector3,i=new THREE.Vector3,h=new THREE.Vector3,l=new THREE.Vector3,R=new THREE.Vector3,T=new THREE.Vector3,w=new THREE.Vector3,H=new THREE.Vector3;function d(t,e,s){for(let a=0,p=t.length;a<p;a++){const E=t[a],c=t[(a+1)%p];y.copy(E),y.applyQuaternion(r),y.add(e),i.copy(c),i.applyQuaternion(r),i.add(e),h.copy(c),h.applyQuaternion(r),h.add(s),l.copy(E),l.applyQuaternion(r),l.add(s),o.push(y.x,y.y,y.z),o.push(i.x,i.y,i.z),o.push(l.x,l.y,l.z),o.push(i.x,i.y,i.z),o.push(h.x,h.y,h.z),o.push(l.x,l.y,l.z),R.copy(E),R.applyQuaternion(r),R.normalize(),T.copy(c),T.applyQuaternion(r),T.normalize(),w.copy(c),w.applyQuaternion(r),w.normalize(),H.copy(E),H.applyQuaternion(r),H.normalize(),n.push(R.x,R.y,R.z),n.push(T.x,T.y,T.z),n.push(H.x,H.y,H.z),n.push(T.x,T.y,T.z),n.push(w.x,w.y,w.z),n.push(H.x,H.y,H.z)}}const V=new THREE.Vector3,x=new THREE.Vector3;for(let z=1;z<=e;z++){a.copy(t.getPointAt(z/e)),p.copy(t.getTangentAt(z/e));const o=Math.atan2(p.x,p.z);r.setFromAxisAngle(s,o),a.y>10?(V.set(-.75,-.35,0),V.applyQuaternion(r),V.add(a),x.set(.75,-.35,0),x.applyQuaternion(r),x.add(a),d(E,V,x),V.set(-.7,-.3,0),V.applyQuaternion(r),V.add(a),x.set(-.7,-a.y,0),x.applyQuaternion(r),x.add(a),d(c,V,x),V.set(.7,-.3,0),V.applyQuaternion(r),V.add(a),x.set(.7,-a.y,0),x.applyQuaternion(r),x.add(a),d(u,V,x)):(V.set(0,-.2,0),V.applyQuaternion(r),V.add(a),x.set(0,-a.y,0),x.applyQuaternion(r),x.add(a),d(u,V,x))}this.setAttribute("position",new THREE.BufferAttribute(new Float32Array(o),3)),this.setAttribute("normal",new THREE.BufferAttribute(new Float32Array(n),3))}}class o extends THREE.BufferGeometry{constructor(t,e){super();const o=[],n=new THREE.Vector3(0,1,0),r=new THREE.Vector3,s=new THREE.Quaternion,a=new THREE.Quaternion;a.setFromAxisAngle(n,Math.PI/2);const p=new THREE.Vector3,E=new THREE.Vector3;E.copy(t.getPointAt(0)),E.y=0;const c=new THREE.Vector3,u=new THREE.Vector3,y=new THREE.Vector3,i=new THREE.Vector3;for(let h=1;h<=e;h++){p.copy(t.getPointAt(h/e)),p.y=0,r.subVectors(p,E);const l=Math.atan2(r.x,r.z);s.setFromAxisAngle(n,l),c.set(-.3,0,0),c.applyQuaternion(s),c.add(p),u.set(.3,0,0),u.applyQuaternion(s),u.add(p),y.set(.3,0,0),y.applyQuaternion(a),y.add(E),i.set(-.3,0,0),i.applyQuaternion(a),i.add(E),o.push(c.x,c.y,c.z),o.push(u.x,u.y,u.z),o.push(i.x,i.y,i.z),o.push(u.x,u.y,u.z),o.push(y.x,y.y,y.z),o.push(i.x,i.y,i.z),E.copy(p),a.copy(s)}this.setAttribute("position",new THREE.BufferAttribute(new Float32Array(o),3))}}class n extends THREE.BufferGeometry{constructor(){super();const t=[];for(let e=0;e<100;e++){const e=800*Math.random()-400,o=50*Math.random()+50,n=800*Math.random()-400,r=40*Math.random()+20;t.push(e-r,o,n-r),t.push(e+r,o,n-r),t.push(e-r,o,n+r),t.push(e+r,o,n-r),t.push(e+r,o,n+r),t.push(e-r,o,n+r)}this.setAttribute("position",new THREE.BufferAttribute(new Float32Array(t),3))}}class r extends THREE.BufferGeometry{constructor(t){super();const e=[],o=[],n=new THREE.Raycaster;n.ray.direction.set(0,-1,0);for(let r=0;r<2e3;r++){const r=500*Math.random()-250,s=500*Math.random()-250;n.ray.origin.set(r,50,s);const a=n.intersectObject(t);if(0===a.length)continue;const p=a[0].point.y,E=5*Math.random()+.5;let c=Math.random()*Math.PI*2;e.push(r+Math.sin(c),p,s+Math.cos(c)),e.push(r,p+E,s),e.push(r+Math.sin(c+Math.PI),p,s+Math.cos(c+Math.PI)),c+=Math.PI/2,e.push(r+Math.sin(c),p,s+Math.cos(c)),e.push(r,p+E,s),e.push(r+Math.sin(c+Math.PI),p,s+Math.cos(c+Math.PI));const u=.1*Math.random();for(let t=0;t<6;t++)o.push(.2+u,.4+u,0)}this.setAttribute("position",new THREE.BufferAttribute(new Float32Array(e),3)),this.setAttribute("color",new THREE.BufferAttribute(new Float32Array(o),3))}}THREE.RollerCoasterGeometry=t,THREE.RollerCoasterLiftersGeometry=e,THREE.RollerCoasterShadowGeometry=o,THREE.SkyGeometry=n,THREE.TreesGeometry=r})();