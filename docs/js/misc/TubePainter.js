(function(){function r(){const r=3e6,a=new THREE.BufferAttribute(new Float32Array(r),3);a.usage=THREE.DynamicDrawUsage;const t=new THREE.BufferAttribute(new Float32Array(r),3);t.usage=THREE.DynamicDrawUsage;const e=new THREE.BufferAttribute(new Float32Array(r),3);e.usage=THREE.DynamicDrawUsage;const o=new THREE.BufferGeometry;o.setAttribute("position",a),o.setAttribute("normal",t),o.setAttribute("color",e),o.drawRange.count=0;const n=new THREE.MeshStandardMaterial({vertexColors:!0}),y=new THREE.Mesh(o,n);function c(r){const a=2*Math.PI,t=10,e=[],o=.01*r;for(let n=0;n<t;n++){const r=n/t*a;e.push(new THREE.Vector3(Math.sin(r)*o,Math.cos(r)*o,0))}return e}y.frustumCulled=!1;const u=new THREE.Vector3,p=new THREE.Vector3,E=new THREE.Vector3,i=new THREE.Vector3,s=new THREE.Color(16777215);let R=1;function d(r,n,y,d){if(0===r.distanceToSquared(n))return;let l=o.drawRange.count;const A=c(R);for(let o=0,c=A.length;o<c;o++){const R=A[o],w=A[(o+1)%c];u.copy(R).applyMatrix4(d).add(n),p.copy(w).applyMatrix4(d).add(n),E.copy(w).applyMatrix4(y).add(r),i.copy(R).applyMatrix4(y).add(r),u.toArray(a.array,3*(l+0)),p.toArray(a.array,3*(l+1)),i.toArray(a.array,3*(l+2)),p.toArray(a.array,3*(l+3)),E.toArray(a.array,3*(l+4)),i.toArray(a.array,3*(l+5)),u.copy(R).applyMatrix4(d).normalize(),p.copy(w).applyMatrix4(d).normalize(),E.copy(w).applyMatrix4(y).normalize(),i.copy(R).applyMatrix4(y).normalize(),u.toArray(t.array,3*(l+0)),p.toArray(t.array,3*(l+1)),i.toArray(t.array,3*(l+2)),p.toArray(t.array,3*(l+3)),E.toArray(t.array,3*(l+4)),i.toArray(t.array,3*(l+5)),s.toArray(e.array,3*(l+0)),s.toArray(e.array,3*(l+1)),s.toArray(e.array,3*(l+2)),s.toArray(e.array,3*(l+3)),s.toArray(e.array,3*(l+4)),s.toArray(e.array,3*(l+5)),l+=6}o.drawRange.count=l}const l=new THREE.Vector3(0,1,0),A=new THREE.Vector3,w=new THREE.Vector3,f=new THREE.Matrix4,T=new THREE.Matrix4;function H(r){A.copy(r),f.lookAt(w,A,l),w.copy(r),T.copy(f)}function g(r){A.copy(r),f.lookAt(w,A,l),d(A,w,f,T),w.copy(A),T.copy(f)}function M(r){R=r}let m=0;function x(){const r=m,n=o.drawRange.count;r!==n&&(a.updateRange.offset=3*r,a.updateRange.count=3*(n-r),a.needsUpdate=!0,t.updateRange.offset=3*r,t.updateRange.count=3*(n-r),t.needsUpdate=!0,e.updateRange.offset=3*r,e.updateRange.count=3*(n-r),e.needsUpdate=!0,m=o.drawRange.count)}return{mesh:y,moveTo:H,lineTo:g,setSize:M,update:x}}THREE.TubePainter=r})();